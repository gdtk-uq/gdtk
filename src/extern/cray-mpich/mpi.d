/*
Header file to the cray MPICH bindings in D.

Steps to generate this file:
 - Use module show cray-mpich to find mpi.h and mpio.h and cray_version.h
   + They should be in the include directory inside CRAY_MPICH_DIR
 - Copy mpi.h and mpio.h and cray_version.h into the working directory
 - Run gcc to preprocess the header file:
    $ gcc -E -P mpi.h > pppmpi.h
 - Then run dstep to convert this into a d file 
    $ ./dstep pppmpi.h -o mpi.d
 - This will create some troublesome variadic functions with arguments like this "..."
   such as MPI_Errhandler_create. Just comment them out.
 - Now run def2d.py to extract the #define constants from mpi.h - > out.d
    $ python3 def2d.py
 - Finally, copy the lines from out.d into place in the mpi.d file.
   This can go anywhere, but somewhere near the top is good.
 - PS: It's a good idea to copy these instructions to the top of mpi.d as well

Notes:
 - Module cray-mpich/8.1.19 and PrgEnv-gnu/8.3.2 were used, with library
   /opt/cray/pe/mpich/8.1.19/ofi/gnu/9.1

@author: (with much gnashing of teeth and funereal wailing) Nick Gibbons [20/06/24]
 - Updated August 2025 to with with cray-mpich/8.1.32 and PrgEnv-gnu/8.6.0
*/

import core.stdc.config;

extern (C):

// Begin #define imports generated by def2d.py
enum NO_TAGS_WITH_MODIFIERS = 1;
immutable MPI_Comm MPI_COMM_NULL = cast(MPI_Comm) 0x04000000;
immutable MPI_Op MPI_OP_NULL = cast(MPI_Op) 0x18000000;
immutable MPI_Group MPI_GROUP_NULL = cast(MPI_Group) 0x08000000;
immutable MPI_Datatype MPI_DATATYPE_NULL = cast(MPI_Datatype) 0x0c000000;
immutable MPI_Request MPI_REQUEST_NULL = cast(MPI_Request) 0x2c000000;
immutable MPI_Errhandler MPI_ERRHANDLER_NULL = cast(MPI_Errhandler) 0x14000000;
immutable MPI_Message MPI_MESSAGE_NULL = cast(MPI_Message) 0x2c000000;
immutable MPI_Message MPI_MESSAGE_NO_PROC = cast(MPI_Message) 0x6c000000;
enum MPI_IDENT = 0;
enum MPI_CONGRUENT = 1;
enum MPI_SIMILAR = 2;
enum MPI_UNEQUAL = 3;
immutable MPI_Datatype MPI_CHAR = cast(MPI_Datatype) 0x4c000101;
immutable MPI_Datatype MPI_SIGNED_CHAR = cast(MPI_Datatype) 0x4c000118;
immutable MPI_Datatype MPI_UNSIGNED_CHAR = cast(MPI_Datatype) 0x4c000102;
immutable MPI_Datatype MPI_BYTE = cast(MPI_Datatype) 0x4c00010d;
immutable MPI_Datatype MPI_WCHAR = cast(MPI_Datatype) 0x4c00040e;
immutable MPI_Datatype MPI_SHORT = cast(MPI_Datatype) 0x4c000203;
immutable MPI_Datatype MPI_UNSIGNED_SHORT = cast(MPI_Datatype) 0x4c000204;
immutable MPI_Datatype MPI_INT = cast(MPI_Datatype) 0x4c000405;
immutable MPI_Datatype MPI_UNSIGNED = cast(MPI_Datatype) 0x4c000406;
immutable MPI_Datatype MPI_LONG = cast(MPI_Datatype) 0x4c000807;
immutable MPI_Datatype MPI_UNSIGNED_LONG = cast(MPI_Datatype) 0x4c000808;
immutable MPI_Datatype MPI_FLOAT = cast(MPI_Datatype) 0x4c00040a;
immutable MPI_Datatype MPI_DOUBLE = cast(MPI_Datatype) 0x4c00080b;
immutable MPI_Datatype MPI_LONG_DOUBLE = cast(MPI_Datatype) 0x4c00100c;
immutable MPI_Datatype MPI_LONG_LONG_INT = cast(MPI_Datatype) 0x4c000809;
immutable MPI_Datatype MPI_UNSIGNED_LONG_LONG = cast(MPI_Datatype) 0x4c000819;
immutable MPI_Datatype MPI_LONG_LONG = cast(MPI_Datatype) 0x4c000809;
immutable MPI_Datatype MPI_PACKED = cast(MPI_Datatype) 0x4c00010f;
immutable MPI_Datatype MPI_LB = cast(MPI_Datatype) 0x4c000010;
immutable MPI_Datatype MPI_UB = cast(MPI_Datatype) 0x4c000011;
immutable MPI_Datatype MPI_FLOAT_INT = cast(MPI_Datatype) 0x8c000000;
immutable MPI_Datatype MPI_DOUBLE_INT = cast(MPI_Datatype) 0x8c000001;
immutable MPI_Datatype MPI_LONG_INT = cast(MPI_Datatype) 0x8c000002;
immutable MPI_Datatype MPI_SHORT_INT = cast(MPI_Datatype) 0x8c000003;
immutable MPI_Datatype MPI_2INT = cast(MPI_Datatype) 0x4c000816;
immutable MPI_Datatype MPI_LONG_DOUBLE_INT = cast(MPI_Datatype) 0x8c000004;
immutable MPI_Datatype MPI_COMPLEX = cast(MPI_Datatype) 1275070494;
immutable MPI_Datatype MPI_DOUBLE_COMPLEX = cast(MPI_Datatype) 1275072546;
immutable MPI_Datatype MPI_LOGICAL = cast(MPI_Datatype) 1275069469;
immutable MPI_Datatype MPI_REAL = cast(MPI_Datatype) 1275069468;
immutable MPI_Datatype MPI_DOUBLE_PRECISION = cast(MPI_Datatype) 1275070495;
immutable MPI_Datatype MPI_INTEGER = cast(MPI_Datatype) 1275069467;
immutable MPI_Datatype MPI_2INTEGER = cast(MPI_Datatype) 1275070496;
immutable MPI_Datatype MPI_2COMPLEX = cast(MPI_Datatype) 1275072548;
immutable MPI_Datatype MPI_2DOUBLE_COMPLEX = cast(MPI_Datatype) 1275076645;
immutable MPI_Datatype MPI_2REAL = cast(MPI_Datatype) 1275070497;
immutable MPI_Datatype MPI_2DOUBLE_PRECISION = cast(MPI_Datatype) 1275072547;
immutable MPI_Datatype MPI_CHARACTER = cast(MPI_Datatype) 1275068698;
immutable MPI_Datatype MPI_REAL4 = cast(MPI_Datatype) 0x4c000427;
immutable MPI_Datatype MPI_REAL8 = cast(MPI_Datatype) 0x4c000829;
immutable MPI_Datatype MPI_REAL16 = cast(MPI_Datatype) 0x4c00102b;
immutable MPI_Datatype MPI_COMPLEX8 = cast(MPI_Datatype) 0x4c000828;
immutable MPI_Datatype MPI_COMPLEX16 = cast(MPI_Datatype) 0x4c00102a;
immutable MPI_Datatype MPI_COMPLEX32 = cast(MPI_Datatype) 0x4c00202c;
immutable MPI_Datatype MPI_INTEGER1 = cast(MPI_Datatype) 0x4c00012d;
immutable MPI_Datatype MPI_INTEGER2 = cast(MPI_Datatype) 0x4c00022f;
immutable MPI_Datatype MPI_INTEGER4 = cast(MPI_Datatype) 0x4c000430;
immutable MPI_Datatype MPI_INTEGER8 = cast(MPI_Datatype) 0x4c000831;
immutable MPI_Datatype MPI_INTEGER16 = cast(MPI_Datatype) MPI_DATATYPE_NULL;
immutable MPI_Datatype MPI_INT8_T = cast(MPI_Datatype) 0x4c000137;
immutable MPI_Datatype MPI_INT16_T = cast(MPI_Datatype) 0x4c000238;
immutable MPI_Datatype MPI_INT32_T = cast(MPI_Datatype) 0x4c000439;
immutable MPI_Datatype MPI_INT64_T = cast(MPI_Datatype) 0x4c00083a;
immutable MPI_Datatype MPI_UINT8_T = cast(MPI_Datatype) 0x4c00013b;
immutable MPI_Datatype MPI_UINT16_T = cast(MPI_Datatype) 0x4c00023c;
immutable MPI_Datatype MPI_UINT32_T = cast(MPI_Datatype) 0x4c00043d;
immutable MPI_Datatype MPI_UINT64_T = cast(MPI_Datatype) 0x4c00083e;
immutable MPI_Datatype MPI_C_BOOL = cast(MPI_Datatype) 0x4c00013f;
immutable MPI_Datatype MPI_C_FLOAT_COMPLEX = cast(MPI_Datatype) 0x4c000840;
immutable MPI_Datatype MPI_C_COMPLEX = cast(MPI_Datatype) 0x4c000840;
immutable MPI_Datatype MPI_C_DOUBLE_COMPLEX = cast(MPI_Datatype) 0x4c001041;
immutable MPI_Datatype MPI_C_LONG_DOUBLE_COMPLEX = cast(MPI_Datatype) 0x4c002042;
immutable MPI_Datatype MPIX_C_FLOAT16 = cast(MPI_Datatype) 0x4c000246;
immutable MPI_Datatype MPI_AINT = cast(MPI_Datatype) 0x4c000843;
immutable MPI_Datatype MPI_OFFSET = cast(MPI_Datatype) 0x4c000844;
immutable MPI_Datatype MPI_COUNT = cast(MPI_Datatype) 0x4c000845;
immutable MPI_Datatype MPI_CXX_BOOL = cast(MPI_Datatype) 0x4c000133;
immutable MPI_Datatype MPI_CXX_FLOAT_COMPLEX = cast(MPI_Datatype) 0x4c000834;
immutable MPI_Datatype MPI_CXX_DOUBLE_COMPLEX = cast(MPI_Datatype) 0x4c001035;
immutable MPI_Datatype MPI_CXX_LONG_DOUBLE_COMPLEX = cast(MPI_Datatype) 0x4c002036;
enum MPI_TYPECLASS_REAL = 1;
enum MPI_TYPECLASS_INTEGER = 2;
enum MPI_TYPECLASS_COMPLEX = 3;
immutable MPI_Comm MPI_COMM_WORLD = cast(MPI_Comm) 0x44000000;
immutable MPI_Comm MPI_COMM_SELF = cast(MPI_Comm) 0x44000001;
immutable MPI_Group MPI_GROUP_EMPTY = cast(MPI_Group) 0x48000000;
immutable MPI_Win MPI_WIN_NULL = cast(MPI_Win) 0x20000000;
immutable MPI_File MPI_FILE_NULL = cast(MPI_File) 0;
immutable MPI_Op MPI_MAX = cast(MPI_Op) 0x58000001;
immutable MPI_Op MPI_MIN = cast(MPI_Op) 0x58000002;
immutable MPI_Op MPI_SUM = cast(MPI_Op) 0x58000003;
immutable MPI_Op MPI_PROD = cast(MPI_Op) 0x58000004;
immutable MPI_Op MPI_LAND = cast(MPI_Op) 0x58000005;
immutable MPI_Op MPI_BAND = cast(MPI_Op) 0x58000006;
immutable MPI_Op MPI_LOR = cast(MPI_Op) 0x58000007;
immutable MPI_Op MPI_BOR = cast(MPI_Op) 0x58000008;
immutable MPI_Op MPI_LXOR = cast(MPI_Op) 0x58000009;
immutable MPI_Op MPI_BXOR = cast(MPI_Op) 0x5800000a;
immutable MPI_Op MPI_MINLOC = cast(MPI_Op) 0x5800000b;
immutable MPI_Op MPI_MAXLOC = cast(MPI_Op) 0x5800000c;
immutable MPI_Op MPI_REPLACE = cast(MPI_Op) 0x5800000d;
immutable MPI_Op MPI_NO_OP = cast(MPI_Op) 0x5800000e;
enum MPI_TAG_UB = 0x64400001;
enum MPI_HOST = 0x64400003;
enum MPI_IO = 0x64400005;
enum MPI_WTIME_IS_GLOBAL = 0x64400007;
enum MPI_UNIVERSE_SIZE = 0x64400009;
enum MPI_LASTUSEDCODE = 0x6440000b;
enum MPI_APPNUM = 0x6440000d;
enum MPI_WIN_BASE = 0x66000001;
enum MPI_WIN_SIZE = 0x66000003;
enum MPI_WIN_DISP_UNIT = 0x66000005;
enum MPI_WIN_CREATE_FLAVOR = 0x66000007;
enum MPI_WIN_MODEL = 0x66000009;
enum MPI_MAX_PROCESSOR_NAME = 128;
enum MPI_MAX_LIBRARY_VERSION_STRING = 8192;
enum MPI_MAX_ERROR_STRING = 512;
enum MPI_MAX_PORT_NAME = 256;
enum MPI_MAX_OBJECT_NAME = 128;
enum MPI_UNDEFINED = (-32766);
enum MPI_KEYVAL_INVALID = 0x24000000;
enum MPI_BSEND_OVERHEAD = 96;
immutable void * MPI_BOTTOM = cast(void *) 0;
enum MPI_PROC_NULL = (-1);
enum MPI_ANY_SOURCE = (-2);
enum MPI_ROOT = (-3);
enum MPI_ANY_TAG = (-1);
enum MPI_LOCK_EXCLUSIVE = 234;
enum MPI_LOCK_SHARED = 235;
immutable MPI_Errhandler MPI_ERRORS_ARE_FATAL = cast(MPI_Errhandler) 0x54000000;
immutable MPI_Errhandler MPI_ERRORS_RETURN = cast(MPI_Errhandler) 0x54000001;
immutable MPI_Errhandler MPIR_ERRORS_THROW_EXCEPTIONS = cast(MPI_Errhandler) 0x54000002;
immutable MPI_Copy_function * MPI_NULL_COPY_FN = cast(MPI_Copy_function *) 0;
immutable MPI_Delete_function * MPI_NULL_DELETE_FN = cast(MPI_Delete_function *) 0;
immutable MPI_Comm_copy_attr_function* MPI_COMM_NULL_COPY_FN = cast(MPI_Comm_copy_attr_function*) 0;
immutable MPI_Comm_delete_attr_function* MPI_COMM_NULL_DELETE_FN = cast(MPI_Comm_delete_attr_function*) 0;
immutable MPI_Win_copy_attr_function* MPI_WIN_NULL_COPY_FN = cast(MPI_Win_copy_attr_function*) 0;
immutable MPI_Win_delete_attr_function* MPI_WIN_NULL_DELETE_FN = cast(MPI_Win_delete_attr_function*) 0;
immutable MPI_Type_copy_attr_function* MPI_TYPE_NULL_COPY_FN = cast(MPI_Type_copy_attr_function*) 0;
immutable MPI_Type_delete_attr_function* MPI_TYPE_NULL_DELETE_FN = cast(MPI_Type_delete_attr_function*) 0;
enum MPI_VERSION = 3;
enum MPI_SUBVERSION = 1;
enum MPICH_NAME = 3;
enum MPICH = 1;
enum MPICH_HAS_C2F = 1;
immutable string MPICH_VERSION = "3.4a2";
enum MPICH_NUMVERSION = 30400002;
enum MPICH_RELEASE_TYPE_ALPHA = 0;
enum MPICH_RELEASE_TYPE_BETA = 1;
enum MPICH_RELEASE_TYPE_RC = 2;
enum MPICH_RELEASE_TYPE_PATCH = 3;
immutable MPI_Info MPI_INFO_NULL = cast(MPI_Info) 0x1c000000;
immutable MPI_Info MPI_INFO_ENV = cast(MPI_Info) 0x5c000001;
enum MPI_MAX_INFO_KEY = 255;
enum MPI_MAX_INFO_VAL = 1024;
enum MPI_ORDER_C = 56;
enum MPI_ORDER_FORTRAN = 57;
enum MPI_DISTRIBUTE_BLOCK = 121;
enum MPI_DISTRIBUTE_CYCLIC = 122;
enum MPI_DISTRIBUTE_NONE = 123;
enum MPI_DISTRIBUTE_DFLT_DARG = -49767;
immutable void * MPI_IN_PLACE = cast(void *)  -1;
enum MPI_MODE_NOCHECK = 1024;
enum MPI_MODE_NOSTORE = 2048;
enum MPI_MODE_NOPUT = 4096;
enum MPI_MODE_NOPRECEDE = 8192;
enum MPI_MODE_NOSUCCEED = 16384;
enum MPI_MODE_STREAM = 32768;
enum MPI_COMM_TYPE_SHARED = 1;
enum MPIX_COMM_TYPE_NEIGHBORHOOD = 2;
immutable string MPI_AINT_FMT_DEC_SPEC = "%ld";
immutable string MPI_AINT_FMT_HEX_SPEC = "%lx";
immutable MPI_T_enum MPI_T_ENUM_NULL = cast(MPI_T_enum) null;
immutable MPI_T_cvar_handle MPI_T_CVAR_HANDLE_NULL = cast(MPI_T_cvar_handle) null;
immutable MPI_T_pvar_handle MPI_T_PVAR_HANDLE_NULL = cast(MPI_T_pvar_handle) null;
immutable MPI_T_pvar_session MPI_T_PVAR_SESSION_NULL = cast(MPI_T_pvar_session) null;
immutable MPI_Fint MPI_Comm_c2f(comm) = cast(MPI_Fint) comm;
immutable MPI_Comm MPI_Comm_f2c(comm) = cast(MPI_Comm) comm;
immutable MPI_Fint MPI_Type_c2f(datatype) = cast(MPI_Fint) datatype;
immutable MPI_Datatype MPI_Type_f2c(datatype) = cast(MPI_Datatype) datatype;
immutable MPI_Fint MPI_Group_c2f(group) = cast(MPI_Fint) group;
immutable MPI_Group MPI_Group_f2c(group) = cast(MPI_Group) group;
immutable MPI_Fint MPI_Info_c2f(info) = cast(MPI_Fint) info;
immutable MPI_Info MPI_Info_f2c(info) = cast(MPI_Info) info;
immutable MPI_Request MPI_Request_f2c(request) = cast(MPI_Request) request;
immutable MPI_Fint MPI_Request_c2f(request) = cast(MPI_Fint) request;
immutable MPI_Fint MPI_Op_c2f(op) = cast(MPI_Fint) op;
immutable MPI_Op MPI_Op_f2c(op) = cast(MPI_Op) op;
immutable MPI_Fint MPI_Errhandler_c2f(errhandler) = cast(MPI_Fint) errhandler;
immutable MPI_Errhandler MPI_Errhandler_f2c(errhandler) = cast(MPI_Errhandler) errhandler;
immutable MPI_Fint MPI_Win_c2f(win) = cast(MPI_Fint) win;
immutable MPI_Win MPI_Win_f2c(win) = cast(MPI_Win) win;
immutable MPI_Fint MPI_Message_c2f(msg) = cast(MPI_Fint) msg;
immutable MPI_Message MPI_Message_f2c(msg) = cast(MPI_Message) msg;
immutable MPI_Fint PMPI_Comm_c2f(comm) = cast(MPI_Fint) comm;
immutable MPI_Comm PMPI_Comm_f2c(comm) = cast(MPI_Comm) comm;
immutable MPI_Fint PMPI_Type_c2f(datatype) = cast(MPI_Fint) datatype;
immutable MPI_Datatype PMPI_Type_f2c(datatype) = cast(MPI_Datatype) datatype;
immutable MPI_Fint PMPI_Group_c2f(group) = cast(MPI_Fint) group;
immutable MPI_Group PMPI_Group_f2c(group) = cast(MPI_Group) group;
immutable MPI_Fint PMPI_Info_c2f(info) = cast(MPI_Fint) info;
immutable MPI_Info PMPI_Info_f2c(info) = cast(MPI_Info) info;
immutable MPI_Request PMPI_Request_f2c(request) = cast(MPI_Request) request;
immutable MPI_Fint PMPI_Request_c2f(request) = cast(MPI_Fint) request;
immutable MPI_Fint PMPI_Op_c2f(op) = cast(MPI_Fint) op;
immutable MPI_Op PMPI_Op_f2c(op) = cast(MPI_Op) op;
immutable MPI_Fint PMPI_Errhandler_c2f(errhandler) = cast(MPI_Fint) errhandler;
immutable MPI_Errhandler PMPI_Errhandler_f2c(errhandler) = cast(MPI_Errhandler) errhandler;
immutable MPI_Fint PMPI_Win_c2f(win) = cast(MPI_Fint) win;
immutable MPI_Win PMPI_Win_f2c(win) = cast(MPI_Win) win;
immutable MPI_Fint PMPI_Message_c2f(msg) = cast(MPI_Fint) msg;
immutable MPI_Message PMPI_Message_f2c(msg) = cast(MPI_Message) msg;
immutable MPI_Status * MPI_STATUS_IGNORE = cast(MPI_Status *) 1;
immutable MPI_Status * MPI_STATUSES_IGNORE = cast(MPI_Status *) 1;
immutable int * MPI_ERRCODES_IGNORE = cast(int *) 0;
immutable char ** MPI_ARGV_NULL = cast(char **) 0;
immutable char *** MPI_ARGVS_NULL = cast(char ***) 0;
enum MPI_THREAD_SINGLE = 0;
enum MPI_THREAD_FUNNELED = 1;
enum MPI_THREAD_SERIALIZED = 2;
enum MPI_THREAD_MULTIPLE = 3;
enum MPI_SUCCESS = 0;
enum MPI_ERR_BUFFER = 1;
enum MPI_ERR_COUNT = 2;
enum MPI_ERR_TYPE = 3;
enum MPI_ERR_TAG = 4;
enum MPI_ERR_COMM = 5;
enum MPI_ERR_RANK = 6;
enum MPI_ERR_ROOT = 7;
enum MPI_ERR_TRUNCATE = 14;
enum MPI_ERR_GROUP = 8;
enum MPI_ERR_OP = 9;
enum MPI_ERR_REQUEST = 19;
enum MPI_ERR_TOPOLOGY = 10;
enum MPI_ERR_DIMS = 11;
enum MPI_ERR_ARG = 12;
enum MPI_ERR_OTHER = 15;
enum MPI_ERR_UNKNOWN = 13;
enum MPI_ERR_INTERN = 16;
enum MPI_ERR_IN_STATUS = 17;
enum MPI_ERR_PENDING = 18;
enum MPI_ERR_ACCESS = 20;
enum MPI_ERR_AMODE = 21;
enum MPI_ERR_BAD_FILE = 22;
enum MPI_ERR_CONVERSION = 23;
enum MPI_ERR_DUP_DATAREP = 24;
enum MPI_ERR_FILE_EXISTS = 25;
enum MPI_ERR_FILE_IN_USE = 26;
enum MPI_ERR_FILE = 27;
enum MPI_ERR_IO = 32;
enum MPI_ERR_NO_SPACE = 36;
enum MPI_ERR_NO_SUCH_FILE = 37;
enum MPI_ERR_READ_ONLY = 40;
enum MPI_ERR_UNSUPPORTED_DATAREP = 43;
enum MPI_ERR_INFO = 28;
enum MPI_ERR_INFO_KEY = 29;
enum MPI_ERR_INFO_VALUE = 30;
enum MPI_ERR_INFO_NOKEY = 31;
enum MPI_ERR_NAME = 33;
enum MPI_ERR_NO_MEM = 34;
enum MPI_ERR_NOT_SAME = 35;
enum MPI_ERR_PORT = 38;
enum MPI_ERR_QUOTA = 39;
enum MPI_ERR_SERVICE = 41;
enum MPI_ERR_SPAWN = 42;
enum MPI_ERR_UNSUPPORTED_OPERATION = 44;
enum MPI_ERR_WIN = 45;
enum MPI_ERR_BASE = 46;
enum MPI_ERR_LOCKTYPE = 47;
enum MPI_ERR_KEYVAL = 48;
enum MPI_ERR_RMA_CONFLICT = 49;
enum MPI_ERR_RMA_SYNC = 50;
enum MPI_ERR_SIZE = 51;
enum MPI_ERR_DISP = 52;
enum MPI_ERR_ASSERT = 53;
enum MPI_ERR_RMA_RANGE = 55;
enum MPI_ERR_RMA_ATTACH = 56;
enum MPI_ERR_RMA_SHARED = 57;
enum MPI_ERR_RMA_FLAVOR = 58;
enum MPI_T_ERR_MEMORY = 59;
enum MPI_T_ERR_NOT_INITIALIZED = 60;
enum MPI_T_ERR_CANNOT_INIT = 61;
enum MPI_T_ERR_INVALID_INDEX = 62;
enum MPI_T_ERR_INVALID_ITEM = 63;
enum MPI_T_ERR_INVALID_HANDLE = 64;
enum MPI_T_ERR_OUT_OF_HANDLES = 65;
enum MPI_T_ERR_OUT_OF_SESSIONS = 66;
enum MPI_T_ERR_INVALID_SESSION = 67;
enum MPI_T_ERR_CVAR_SET_NOT_NOW = 68;
enum MPI_T_ERR_CVAR_SET_NEVER = 69;
enum MPI_T_ERR_PVAR_NO_STARTSTOP = 70;
enum MPI_T_ERR_PVAR_NO_WRITE = 71;
enum MPI_T_ERR_PVAR_NO_ATOMIC = 72;
enum MPI_T_ERR_INVALID_NAME = 73;
enum MPI_T_ERR_INVALID = 74;
enum MPI_ERR_LASTCODE = 0x3fffffff;
enum MPICH_ERR_LAST_CLASS = 74;
enum MPICH_ERR_FIRST_MPIX = 100;
enum MPIX_ERR_PROC_FAILED = MPICH_ERR_FIRST_MPIX+1;
enum MPIX_ERR_PROC_FAILED_PENDING = MPICH_ERR_FIRST_MPIX+2;
enum MPIX_ERR_REVOKED = MPICH_ERR_FIRST_MPIX+3;
enum MPIX_ERR_EAGAIN = MPICH_ERR_FIRST_MPIX+4;
enum MPIX_ERR_NOREQ = MPICH_ERR_FIRST_MPIX+5;
enum MPICH_ERR_LAST_MPIX = MPICH_ERR_FIRST_MPIX+5;
immutable MPI_Datarep_conversion_function * MPI_CONVERSION_FN_NULL = cast(MPI_Datarep_conversion_function *) 0;
enum MPIX_GPU_SUPPORT_CUDA = 0;
enum MPIX_GPU_SUPPORT_ZE = 1;
enum MPIX_GPU_SUPPORT_HIP = 2;
enum MPIIMPL_ADVERTISES_FEATURES = 1;
enum MPIIMPL_HAVE_MPI_INFO = 1;
enum MPIIMPL_HAVE_MPI_COMBINER_DARRAY = 1;
enum MPIIMPL_HAVE_MPI_TYPE_CREATE_DARRAY = 1;
enum MPIIMPL_HAVE_MPI_COMBINER_SUBARRAY = 1;
enum MPIIMPL_HAVE_MPI_COMBINER_DUP = 1;
enum MPIIMPL_HAVE_MPI_GREQUEST = 1;
enum MPIIMPL_HAVE_STATUS_SET_BYTES = 1;
enum MPIIMPL_HAVE_STATUS_SET_INFO = 1;

alias __u_char = ubyte;
alias __u_short = ushort;
alias __u_int = uint;
alias __u_long = c_ulong;
alias __int8_t = byte;
alias __uint8_t = ubyte;
alias __int16_t = short;
alias __uint16_t = ushort;
alias __int32_t = int;
alias __uint32_t = uint;
alias __int64_t = c_long;
alias __uint64_t = c_ulong;
alias __int_least8_t = byte;
alias __uint_least8_t = ubyte;
alias __int_least16_t = short;
alias __uint_least16_t = ushort;
alias __int_least32_t = int;
alias __uint_least32_t = uint;
alias __int_least64_t = c_long;
alias __uint_least64_t = c_ulong;
alias __quad_t = c_long;
alias __u_quad_t = c_ulong;
alias __intmax_t = c_long;
alias __uintmax_t = c_ulong;
alias __dev_t = c_ulong;
alias __uid_t = uint;
alias __gid_t = uint;
alias __ino_t = c_ulong;
alias __ino64_t = c_ulong;
alias __mode_t = uint;
alias __nlink_t = c_ulong;
alias __off_t = c_long;
alias __off64_t = c_long;
alias __pid_t = int;

struct __fsid_t
{
    int[2] __val;
}

alias __clock_t = c_long;
alias __rlim_t = c_ulong;
alias __rlim64_t = c_ulong;
alias __id_t = uint;
alias __time_t = c_long;
alias __useconds_t = uint;
alias __suseconds_t = c_long;
alias __suseconds64_t = c_long;
alias __daddr_t = int;
alias __key_t = int;
alias __clockid_t = int;
alias __timer_t = void*;
alias __blksize_t = c_long;
alias __blkcnt_t = c_long;
alias __blkcnt64_t = c_long;
alias __fsblkcnt_t = c_ulong;
alias __fsblkcnt64_t = c_ulong;
alias __fsfilcnt_t = c_ulong;
alias __fsfilcnt64_t = c_ulong;
alias __fsword_t = c_long;
alias __ssize_t = c_long;
alias __syscall_slong_t = c_long;
alias __syscall_ulong_t = c_ulong;
alias __loff_t = c_long;
alias __caddr_t = char*;
alias __intptr_t = c_long;
alias __socklen_t = uint;
alias __sig_atomic_t = int;
alias int_least8_t = byte;
alias int_least16_t = short;
alias int_least32_t = int;
alias int_least64_t = c_long;
alias uint_least8_t = ubyte;
alias uint_least16_t = ushort;
alias uint_least32_t = uint;
alias uint_least64_t = c_ulong;
alias int_fast8_t = byte;
alias int_fast16_t = c_long;
alias int_fast32_t = c_long;
alias int_fast64_t = c_long;
alias uint_fast8_t = ubyte;
alias uint_fast16_t = c_ulong;
alias uint_fast32_t = c_ulong;
alias uint_fast64_t = c_ulong;
alias intptr_t = c_long;
alias uintptr_t = c_ulong;
alias intmax_t = c_long;
alias uintmax_t = c_ulong;
alias MPI_Datatype = int;
alias MPI_Comm = int;
alias MPI_Group = int;
alias MPI_Win = int;
struct ADIOI_FileD;
alias MPI_File = ADIOI_FileD*;
alias MPI_Op = int;

enum MPIR_Win_flavor
{
    MPI_WIN_FLAVOR_CREATE = 1,
    MPI_WIN_FLAVOR_ALLOCATE = 2,
    MPI_WIN_FLAVOR_DYNAMIC = 3,
    MPI_WIN_FLAVOR_SHARED = 4
}

alias MPIR_Win_flavor_t = MPIR_Win_flavor;

enum MPIR_Win_model
{
    MPI_WIN_SEPARATE = 1,
    MPI_WIN_UNIFIED = 2
}

alias MPIR_Win_model_t = MPIR_Win_model;

enum MPIR_Topo_type
{
    MPI_GRAPH = 1,
    MPI_CART = 2,
    MPI_DIST_GRAPH = 3
}

extern __gshared int* MPI_UNWEIGHTED;
extern __gshared int* MPI_WEIGHTS_EMPTY;
//alias MPI_Handler_function = void function (MPI_Comm*, int*, ...);
alias MPI_Comm_copy_attr_function = int function (
    MPI_Comm,
    int,
    void*,
    void*,
    void*,
    int*);
alias MPI_Comm_delete_attr_function = int function (MPI_Comm, int, void*, void*);
alias MPI_Type_copy_attr_function = int function (
    MPI_Datatype,
    int,
    void*,
    void*,
    void*,
    int*);
alias MPI_Type_delete_attr_function = int function (MPI_Datatype, int, void*, void*);
alias MPI_Win_copy_attr_function = int function (
    MPI_Win,
    int,
    void*,
    void*,
    void*,
    int*);
alias MPI_Win_delete_attr_function = int function (MPI_Win, int, void*, void*);
//alias MPI_Comm_errhandler_function = void function (MPI_Comm*, int*, ...);
//alias MPI_File_errhandler_function = void function (MPI_File*, int*, ...);
//alias MPI_Win_errhandler_function = void function (MPI_Win*, int*, ...);
//alias MPI_Comm_errhandler_fn = void function (...);
//alias MPI_File_errhandler_fn = void function (...);
//alias MPI_Win_errhandler_fn = void function (...);
alias MPI_Errhandler = int;
alias MPI_Request = int;
alias MPIX_Queue = int;

struct MPIX_Drequest
{
    ulong* to_host;
    ulong* from_host;
    ubyte[8] reserved;
}

alias MPI_Message = int;
alias MPI_User_function = void function (void*, void*, int*, MPI_Datatype*);
alias MPI_Copy_function = int function (MPI_Comm, int, void*, void*, void*, int*);
alias MPI_Delete_function = int function (MPI_Comm, int, void*, void*);

enum MPIR_Combiner_enum
{
    MPI_COMBINER_NAMED = 1,
    MPI_COMBINER_DUP = 2,
    MPI_COMBINER_CONTIGUOUS = 3,
    MPI_COMBINER_VECTOR = 4,
    MPI_COMBINER_HVECTOR_INTEGER = 5,
    MPI_COMBINER_HVECTOR = 6,
    MPI_COMBINER_INDEXED = 7,
    MPI_COMBINER_HINDEXED_INTEGER = 8,
    MPI_COMBINER_HINDEXED = 9,
    MPI_COMBINER_INDEXED_BLOCK = 10,
    MPI_COMBINER_STRUCT_INTEGER = 11,
    MPI_COMBINER_STRUCT = 12,
    MPI_COMBINER_SUBARRAY = 13,
    MPI_COMBINER_DARRAY = 14,
    MPI_COMBINER_F90_REAL = 15,
    MPI_COMBINER_F90_COMPLEX = 16,
    MPI_COMBINER_F90_INTEGER = 17,
    MPI_COMBINER_RESIZED = 18,
    MPI_COMBINER_HINDEXED_BLOCK = 19
}

alias MPI_Info = int;
alias MPI_Aint = c_long;
alias MPI_Fint = int;
alias MPI_Count = long;
alias MPI_Offset = long;

struct MPI_Status
{
    int count_lo;
    int count_hi_and_cancelled;
    int MPI_SOURCE;
    int MPI_TAG;
    int MPI_ERROR;
}

struct MPIR_T_enum_s;
struct MPIR_T_cvar_handle_s;
struct MPIR_T_pvar_handle_s;
struct MPIR_T_pvar_session_s;
alias MPI_T_enum = MPIR_T_enum_s*;
alias MPI_T_cvar_handle = MPIR_T_cvar_handle_s*;
alias MPI_T_pvar_handle = MPIR_T_pvar_handle_s*;
alias MPI_T_pvar_session = MPIR_T_pvar_session_s*;
extern __gshared MPIR_T_pvar_handle_s* MPI_T_PVAR_ALL_HANDLES;

enum MPIR_T_verbosity_t
{
    MPIX_T_VERBOSITY_INVALID = 0,
    MPI_T_VERBOSITY_USER_BASIC = 221,
    MPI_T_VERBOSITY_USER_DETAIL = 222,
    MPI_T_VERBOSITY_USER_ALL = 223,
    MPI_T_VERBOSITY_TUNER_BASIC = 224,
    MPI_T_VERBOSITY_TUNER_DETAIL = 225,
    MPI_T_VERBOSITY_TUNER_ALL = 226,
    MPI_T_VERBOSITY_MPIDEV_BASIC = 227,
    MPI_T_VERBOSITY_MPIDEV_DETAIL = 228,
    MPI_T_VERBOSITY_MPIDEV_ALL = 229
}

enum MPIR_T_bind_t
{
    MPIX_T_BIND_INVALID = 0,
    MPI_T_BIND_NO_OBJECT = 9700,
    MPI_T_BIND_MPI_COMM = 9701,
    MPI_T_BIND_MPI_DATATYPE = 9702,
    MPI_T_BIND_MPI_ERRHANDLER = 9703,
    MPI_T_BIND_MPI_FILE = 9704,
    MPI_T_BIND_MPI_GROUP = 9705,
    MPI_T_BIND_MPI_OP = 9706,
    MPI_T_BIND_MPI_REQUEST = 9707,
    MPI_T_BIND_MPI_WIN = 9708,
    MPI_T_BIND_MPI_MESSAGE = 9709,
    MPI_T_BIND_MPI_INFO = 9710
}

enum MPIR_T_scope_t
{
    MPIX_T_SCOPE_INVALID = 0,
    MPI_T_SCOPE_CONSTANT = 60438,
    MPI_T_SCOPE_READONLY = 60439,
    MPI_T_SCOPE_LOCAL = 60440,
    MPI_T_SCOPE_GROUP = 60441,
    MPI_T_SCOPE_GROUP_EQ = 60442,
    MPI_T_SCOPE_ALL = 60443,
    MPI_T_SCOPE_ALL_EQ = 60444
}

enum MPIR_T_pvar_class_t
{
    MPIX_T_PVAR_CLASS_INVALID = 0,
    MPIR_T_PVAR_CLASS_FIRST = 240,
    MPI_T_PVAR_CLASS_STATE = MPIR_T_PVAR_CLASS_FIRST,
    MPI_T_PVAR_CLASS_LEVEL = 241,
    MPI_T_PVAR_CLASS_SIZE = 242,
    MPI_T_PVAR_CLASS_PERCENTAGE = 243,
    MPI_T_PVAR_CLASS_HIGHWATERMARK = 244,
    MPI_T_PVAR_CLASS_LOWWATERMARK = 245,
    MPI_T_PVAR_CLASS_COUNTER = 246,
    MPI_T_PVAR_CLASS_AGGREGATE = 247,
    MPI_T_PVAR_CLASS_TIMER = 248,
    MPI_T_PVAR_CLASS_GENERIC = 249,
    MPIR_T_PVAR_CLASS_LAST = 250,
    MPIR_T_PVAR_CLASS_NUMBER = MPIR_T_PVAR_CLASS_LAST - MPIR_T_PVAR_CLASS_FIRST
}

extern __gshared MPI_Fint* MPI_F_STATUS_IGNORE;
extern __gshared MPI_Fint* MPI_F_STATUSES_IGNORE;

struct MPI_F08_status
{
    MPI_Fint count_lo;
    MPI_Fint count_hi_and_cancelled;
    MPI_Fint MPI_SOURCE;
    MPI_Fint MPI_TAG;
    MPI_Fint MPI_ERROR;
}

extern __gshared MPI_F08_status MPIR_F08_MPI_STATUS_IGNORE_OBJ;
extern __gshared MPI_F08_status[1] MPIR_F08_MPI_STATUSES_IGNORE_OBJ;
extern __gshared int MPIR_F08_MPI_IN_PLACE;
extern __gshared int MPIR_F08_MPI_BOTTOM;
extern __gshared MPI_F08_status* MPI_F08_STATUS_IGNORE;
extern __gshared MPI_F08_status* MPI_F08_STATUSES_IGNORE;
alias MPI_Grequest_cancel_function = int function (void*, int);
alias MPI_Grequest_free_function = int function (void*);
alias MPI_Grequest_query_function = int function (void*, MPI_Status*);
alias MPIX_Grequest_poll_function = int function (void*, MPI_Status*);
alias MPIX_Grequest_wait_function = int function (int, void**, double, MPI_Status*);
alias MPI_Datarep_conversion_function = int function (
    void*,
    MPI_Datatype,
    int,
    void*,
    MPI_Offset,
    void*);
alias MPI_Datarep_extent_function = int function (
    MPI_Datatype datatype,
    MPI_Aint*,
    void*);
int MPI_Send (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm);
int MPI_Recv (
    void* buf,
    int count,
    MPI_Datatype datatype,
    int source,
    int tag,
    MPI_Comm comm,
    MPI_Status* status);
int MPI_Get_count (const(MPI_Status)* status, MPI_Datatype datatype, int* count);
int MPI_Bsend (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm);
int MPI_Ssend (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm);
int MPI_Rsend (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm);
int MPI_Buffer_attach (void* buffer, int size);
int MPI_Buffer_detach (void* buffer_addr, int* size);
int MPI_Isend (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int MPI_Ibsend (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int MPI_Issend (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int MPI_Irsend (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int MPI_Irecv (
    void* buf,
    int count,
    MPI_Datatype datatype,
    int source,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int MPI_Wait (MPI_Request* request, MPI_Status* status);
int MPI_Test (MPI_Request* request, int* flag, MPI_Status* status);
int MPI_Request_free (MPI_Request* request);
int MPI_Waitany (int count, MPI_Request* array_of_requests, int* indx, MPI_Status* status);
int MPI_Testany (
    int count,
    MPI_Request* array_of_requests,
    int* indx,
    int* flag,
    MPI_Status* status);
int MPI_Waitall (int count, MPI_Request* array_of_requests, MPI_Status* array_of_statuses);
int MPI_Testall (
    int count,
    MPI_Request* array_of_requests,
    int* flag,
    MPI_Status* array_of_statuses);
int MPI_Waitsome (
    int incount,
    MPI_Request* array_of_requests,
    int* outcount,
    int* array_of_indices,
    MPI_Status* array_of_statuses);
int MPI_Testsome (
    int incount,
    MPI_Request* array_of_requests,
    int* outcount,
    int* array_of_indices,
    MPI_Status* array_of_statuses);
int MPI_Iprobe (int source, int tag, MPI_Comm comm, int* flag, MPI_Status* status);
int MPI_Probe (int source, int tag, MPI_Comm comm, MPI_Status* status);
int MPI_Cancel (MPI_Request* request);
int MPI_Test_cancelled (const(MPI_Status)* status, int* flag);
int MPI_Send_init (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int MPI_Bsend_init (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int MPI_Ssend_init (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int MPI_Rsend_init (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int MPI_Recv_init (
    void* buf,
    int count,
    MPI_Datatype datatype,
    int source,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int MPI_Start (MPI_Request* request);
int MPI_Startall (int count, MPI_Request* array_of_requests);
int MPI_Sendrecv (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    int dest,
    int sendtag,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    int source,
    int recvtag,
    MPI_Comm comm,
    MPI_Status* status);

int MPI_Sendrecv_replace (
    void* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int sendtag,
    int source,
    int recvtag,
    MPI_Comm comm,
    MPI_Status* status);
int MPI_Type_contiguous (int count, MPI_Datatype oldtype, MPI_Datatype* newtype);
int MPI_Type_vector (
    int count,
    int blocklength,
    int stride,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int MPI_Type_hvector (
    int count,
    int blocklength,
    MPI_Aint stride,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int MPI_Type_indexed (
    int count,
    const(int)* array_of_blocklengths,
    const(int)* array_of_displacements,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int MPI_Type_hindexed (
    int count,
    int* array_of_blocklengths,
    MPI_Aint* array_of_displacements,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int MPI_Type_struct (
    int count,
    int* array_of_blocklengths,
    MPI_Aint* array_of_displacements,
    MPI_Datatype* array_of_types,
    MPI_Datatype* newtype);
int MPI_Address (void* location, MPI_Aint* address);
int MPI_Type_extent (MPI_Datatype datatype, MPI_Aint* extent);
int MPI_Type_size (MPI_Datatype datatype, int* size);
int MPI_Type_lb (MPI_Datatype datatype, MPI_Aint* displacement);
int MPI_Type_ub (MPI_Datatype datatype, MPI_Aint* displacement);
int MPI_Type_commit (MPI_Datatype* datatype);
int MPI_Type_free (MPI_Datatype* datatype);
int MPI_Get_elements (const(MPI_Status)* status, MPI_Datatype datatype, int* count);
int MPI_Pack (
    const(void)* inbuf,
    int incount,
    MPI_Datatype datatype,
    void* outbuf,
    int outsize,
    int* position,
    MPI_Comm comm);
int MPI_Unpack (
    const(void)* inbuf,
    int insize,
    int* position,
    void* outbuf,
    int outcount,
    MPI_Datatype datatype,
    MPI_Comm comm);
int MPI_Pack_size (int incount, MPI_Datatype datatype, MPI_Comm comm, int* size);
int MPI_Barrier (MPI_Comm comm);
int MPI_Bcast (void* buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm);

int MPI_Gather (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    int root,
    MPI_Comm comm);

int MPI_Gatherv (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* displs,
    MPI_Datatype recvtype,
    int root,
    MPI_Comm comm);

int MPI_Scatter (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    int root,
    MPI_Comm comm);

int MPI_Scatterv (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(int)* displs,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    int root,
    MPI_Comm comm);

int MPI_Allgather (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    MPI_Comm comm);

int MPI_Allgatherv (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* displs,
    MPI_Datatype recvtype,
    MPI_Comm comm);

int MPI_Alltoall (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    MPI_Comm comm);

int MPI_Alltoallv (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(int)* sdispls,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* rdispls,
    MPI_Datatype recvtype,
    MPI_Comm comm);

int MPI_Alltoallw (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(int)* sdispls,
    const(MPI_Datatype)* sendtypes,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* rdispls,
    const(MPI_Datatype)* recvtypes,
    MPI_Comm comm);
int MPI_Exscan (
    const(void)* sendbuf,
    void* recvbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm);

int MPI_Reduce (
    const(void)* sendbuf,
    void* recvbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op,
    int root,
    MPI_Comm comm);

int MPI_Op_create (void function () user_fn, int commute, MPI_Op* op);
int MPI_Op_free (MPI_Op* op);
int MPI_Allreduce (
    const(void)* sendbuf,
    void* recvbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm);

int MPI_Reduce_scatter (
    const(void)* sendbuf,
    void* recvbuf,
    const(int)* recvcounts,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm);

int MPI_Scan (
    const(void)* sendbuf,
    void* recvbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm);

int MPI_Group_size (MPI_Group group, int* size);
int MPI_Group_rank (MPI_Group group, int* rank);
int MPI_Group_translate_ranks (
    MPI_Group group1,
    int n,
    const(int)* ranks1,
    MPI_Group group2,
    int* ranks2);
int MPI_Group_compare (MPI_Group group1, MPI_Group group2, int* result);
int MPI_Comm_group (MPI_Comm comm, MPI_Group* group);
int MPI_Group_union (MPI_Group group1, MPI_Group group2, MPI_Group* newgroup);
int MPI_Group_intersection (MPI_Group group1, MPI_Group group2, MPI_Group* newgroup);
int MPI_Group_difference (MPI_Group group1, MPI_Group group2, MPI_Group* newgroup);
int MPI_Group_incl (MPI_Group group, int n, const(int)* ranks, MPI_Group* newgroup);
int MPI_Group_excl (MPI_Group group, int n, const(int)* ranks, MPI_Group* newgroup);
int MPI_Group_range_incl (MPI_Group group, int n, ref int[3]* ranges, MPI_Group* newgroup);
int MPI_Group_range_excl (MPI_Group group, int n, ref int[3]* ranges, MPI_Group* newgroup);
int MPI_Group_free (MPI_Group* group);
int MPI_Comm_size (MPI_Comm comm, int* size);
int MPI_Comm_rank (MPI_Comm comm, int* rank);
int MPI_Comm_compare (MPI_Comm comm1, MPI_Comm comm2, int* result);
int MPI_Comm_dup (MPI_Comm comm, MPI_Comm* newcomm);
int MPI_Comm_dup_with_info (MPI_Comm comm, MPI_Info info, MPI_Comm* newcomm);
int MPI_Comm_create (MPI_Comm comm, MPI_Group group, MPI_Comm* newcomm);
int MPI_Comm_split (MPI_Comm comm, int color, int key, MPI_Comm* newcomm);
int MPI_Comm_free (MPI_Comm* comm);
int MPI_Comm_test_inter (MPI_Comm comm, int* flag);
int MPI_Comm_remote_size (MPI_Comm comm, int* size);
int MPI_Comm_remote_group (MPI_Comm comm, MPI_Group* group);
int MPI_Intercomm_create (
    MPI_Comm local_comm,
    int local_leader,
    MPI_Comm peer_comm,
    int remote_leader,
    int tag,
    MPI_Comm* newintercomm);
int MPI_Intercomm_merge (MPI_Comm intercomm, int high, MPI_Comm* newintracomm);
int MPI_Keyval_create (
    int function () copy_fn,
    int function () delete_fn,
    int* keyval,
    void* extra_state);
int MPI_Keyval_free (int* keyval);
int MPI_Attr_put (MPI_Comm comm, int keyval, void* attribute_val);
int MPI_Attr_get (MPI_Comm comm, int keyval, void* attribute_val, int* flag);
int MPI_Attr_delete (MPI_Comm comm, int keyval);
int MPI_Topo_test (MPI_Comm comm, int* status);
int MPI_Cart_create (
    MPI_Comm comm_old,
    int ndims,
    const(int)* dims,
    const(int)* periods,
    int reorder,
    MPI_Comm* comm_cart);
int MPI_Dims_create (int nnodes, int ndims, int* dims);
int MPI_Graph_create (
    MPI_Comm comm_old,
    int nnodes,
    const(int)* indx,
    const(int)* edges,
    int reorder,
    MPI_Comm* comm_graph);
int MPI_Graphdims_get (MPI_Comm comm, int* nnodes, int* nedges);
int MPI_Graph_get (MPI_Comm comm, int maxindex, int maxedges, int* indx, int* edges);
int MPI_Cartdim_get (MPI_Comm comm, int* ndims);
int MPI_Cart_get (MPI_Comm comm, int maxdims, int* dims, int* periods, int* coords);
int MPI_Cart_rank (MPI_Comm comm, const(int)* coords, int* rank);
int MPI_Cart_coords (MPI_Comm comm, int rank, int maxdims, int* coords);
int MPI_Graph_neighbors_count (MPI_Comm comm, int rank, int* nneighbors);
int MPI_Graph_neighbors (MPI_Comm comm, int rank, int maxneighbors, int* neighbors);
int MPI_Cart_shift (MPI_Comm comm, int direction, int disp, int* rank_source, int* rank_dest);
int MPI_Cart_sub (MPI_Comm comm, const(int)* remain_dims, MPI_Comm* newcomm);
int MPI_Cart_map (MPI_Comm comm, int ndims, const(int)* dims, const(int)* periods, int* newrank);
int MPI_Graph_map (MPI_Comm comm, int nnodes, const(int)* indx, const(int)* edges, int* newrank);
int MPI_Get_processor_name (char* name, int* resultlen);
int MPI_Get_version (int* version_, int* subversion);
int MPI_Get_library_version (char* version_, int* resultlen);
//int MPI_Errhandler_create (void function (...) function_, MPI_Errhandler* errhandler);
int MPI_Errhandler_set (MPI_Comm comm, MPI_Errhandler errhandler);
int MPI_Errhandler_get (MPI_Comm comm, MPI_Errhandler* errhandler);
int MPI_Errhandler_free (MPI_Errhandler* errhandler);
int MPI_Error_string (int errorcode, char* string, int* resultlen);
int MPI_Error_class (int errorcode, int* errorclass);
double MPI_Wtime ();
double MPI_Wtick ();
int MPI_Init (int* argc, char*** argv);
int MPI_Finalize ();
int MPI_Initialized (int* flag);
int MPI_Abort (MPI_Comm comm, int errorcode);
//int MPI_Pcontrol (const int level, ...);
int MPIR_Dup_fn (
    MPI_Comm oldcomm,
    int keyval,
    void* extra_state,
    void* attribute_val_in,
    void* attribute_val_out,
    int* flag);
int MPI_Close_port (const(char)* port_name);
int MPI_Comm_accept (
    const(char)* port_name,
    MPI_Info info,
    int root,
    MPI_Comm comm,
    MPI_Comm* newcomm);
int MPI_Comm_connect (
    const(char)* port_name,
    MPI_Info info,
    int root,
    MPI_Comm comm,
    MPI_Comm* newcomm);
int MPI_Comm_disconnect (MPI_Comm* comm);
int MPI_Comm_get_parent (MPI_Comm* parent);
int MPI_Comm_join (int fd, MPI_Comm* intercomm);
int MPI_Comm_spawn (
    const(char)* command,
    char** argv,
    int maxprocs,
    MPI_Info info,
    int root,
    MPI_Comm comm,
    MPI_Comm* intercomm,
    int* array_of_errcodes);
int MPI_Comm_spawn_multiple (
    int count,
    char** array_of_commands,
    char*** array_of_argv,
    const(int)* array_of_maxprocs,
    const(MPI_Info)* array_of_info,
    int root,
    MPI_Comm comm,
    MPI_Comm* intercomm,
    int* array_of_errcodes);
int MPI_Lookup_name (const(char)* service_name, MPI_Info info, char* port_name);
int MPI_Open_port (MPI_Info info, char* port_name);
int MPI_Publish_name (const(char)* service_name, MPI_Info info, const(char)* port_name);
int MPI_Unpublish_name (const(char)* service_name, MPI_Info info, const(char)* port_name);
int MPI_Comm_set_info (MPI_Comm comm, MPI_Info info);
int MPI_Comm_get_info (MPI_Comm comm, MPI_Info* info);
int MPIX_Comm_rankpool (MPI_Comm comm, const(char)* name, int timeout);
int MPIX_GPU_query_support (int gpu_type, int* is_supported);
int MPIX_Query_cuda_support ();
int MPIX_Create_queue (MPI_Comm comm, void* stream, MPIX_Queue* queue);
int MPIX_Free_queue (MPIX_Queue queue);
int MPIX_Enqueue_send (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPIX_Queue queue,
    MPI_Request* request);
int MPIX_Enqueue_recv (
    void* buf,
    int count,
    MPI_Datatype datatype,
    int source,
    int tag,
    MPIX_Queue queue,
    MPI_Request* request);
int MPIX_Enqueue_start (const MPIX_Queue queue);
int MPIX_Enqueue_wait (const MPIX_Queue queue);
int MPIX_KT_Get_dreq (MPI_Request request, MPIX_Drequest* drequest);
int MPIX_Win_post_stream (MPI_Group group, MPI_Win win, void* stream);
int MPIX_Win_complete_stream (MPI_Win win, void* stream);
int MPIX_Win_wait_stream (MPI_Win win, void* stream);
int MPI_Accumulate (
    const(void)* origin_addr,
    int origin_count,
    MPI_Datatype origin_datatype,
    int target_rank,
    MPI_Aint target_disp,
    int target_count,
    MPI_Datatype target_datatype,
    MPI_Op op,
    MPI_Win win);

int MPI_Get (
    void* origin_addr,
    int origin_count,
    MPI_Datatype origin_datatype,
    int target_rank,
    MPI_Aint target_disp,
    int target_count,
    MPI_Datatype target_datatype,
    MPI_Win win);
int MPI_Put (
    const(void)* origin_addr,
    int origin_count,
    MPI_Datatype origin_datatype,
    int target_rank,
    MPI_Aint target_disp,
    int target_count,
    MPI_Datatype target_datatype,
    MPI_Win win);
int MPI_Win_complete (MPI_Win win);
int MPI_Win_create (
    void* base,
    MPI_Aint size,
    int disp_unit,
    MPI_Info info,
    MPI_Comm comm,
    MPI_Win* win);
int MPI_Win_fence (int assert_, MPI_Win win);
int MPI_Win_free (MPI_Win* win);
int MPI_Win_get_group (MPI_Win win, MPI_Group* group);
int MPI_Win_lock (int lock_type, int rank, int assert_, MPI_Win win);
int MPI_Win_post (MPI_Group group, int assert_, MPI_Win win);
int MPI_Win_start (MPI_Group group, int assert_, MPI_Win win);
int MPI_Win_test (MPI_Win win, int* flag);
int MPI_Win_unlock (int rank, MPI_Win win);
int MPI_Win_wait (MPI_Win win);
int MPI_Win_allocate (
    MPI_Aint size,
    int disp_unit,
    MPI_Info info,
    MPI_Comm comm,
    void* baseptr,
    MPI_Win* win);
int MPI_Win_allocate_shared (
    MPI_Aint size,
    int disp_unit,
    MPI_Info info,
    MPI_Comm comm,
    void* baseptr,
    MPI_Win* win);
int MPI_Win_shared_query (MPI_Win win, int rank, MPI_Aint* size, int* disp_unit, void* baseptr);
int MPI_Win_create_dynamic (MPI_Info info, MPI_Comm comm, MPI_Win* win);
int MPI_Win_attach (MPI_Win win, void* base, MPI_Aint size);
int MPI_Win_detach (MPI_Win win, const(void)* base);
int MPI_Win_get_info (MPI_Win win, MPI_Info* info_used);
int MPI_Win_set_info (MPI_Win win, MPI_Info info);
int MPI_Get_accumulate (
    const(void)* origin_addr,
    int origin_count,
    MPI_Datatype origin_datatype,
    void* result_addr,
    int result_count,
    MPI_Datatype result_datatype,
    int target_rank,
    MPI_Aint target_disp,
    int target_count,
    MPI_Datatype target_datatype,
    MPI_Op op,
    MPI_Win win);

int MPI_Fetch_and_op (
    const(void)* origin_addr,
    void* result_addr,
    MPI_Datatype datatype,
    int target_rank,
    MPI_Aint target_disp,
    MPI_Op op,
    MPI_Win win);

int MPI_Compare_and_swap (
    const(void)* origin_addr,
    const(void)* compare_addr,
    void* result_addr,
    MPI_Datatype datatype,
    int target_rank,
    MPI_Aint target_disp,
    MPI_Win win);

int MPI_Rput (
    const(void)* origin_addr,
    int origin_count,
    MPI_Datatype origin_datatype,
    int target_rank,
    MPI_Aint target_disp,
    int target_count,
    MPI_Datatype target_datatype,
    MPI_Win win,
    MPI_Request* request);

int MPI_Rget (
    void* origin_addr,
    int origin_count,
    MPI_Datatype origin_datatype,
    int target_rank,
    MPI_Aint target_disp,
    int target_count,
    MPI_Datatype target_datatype,
    MPI_Win win,
    MPI_Request* request);

int MPI_Raccumulate (
    const(void)* origin_addr,
    int origin_count,
    MPI_Datatype origin_datatype,
    int target_rank,
    MPI_Aint target_disp,
    int target_count,
    MPI_Datatype target_datatype,
    MPI_Op op,
    MPI_Win win,
    MPI_Request* request);

int MPI_Rget_accumulate (
    const(void)* origin_addr,
    int origin_count,
    MPI_Datatype origin_datatype,
    void* result_addr,
    int result_count,
    MPI_Datatype result_datatype,
    int target_rank,
    MPI_Aint target_disp,
    int target_count,
    MPI_Datatype target_datatype,
    MPI_Op op,
    MPI_Win win,
    MPI_Request* request);

int MPI_Win_lock_all (int assert_, MPI_Win win);
int MPI_Win_unlock_all (MPI_Win win);
int MPI_Win_flush (int rank, MPI_Win win);
int MPI_Win_flush_all (MPI_Win win);
int MPI_Win_flush_local (int rank, MPI_Win win);
int MPI_Win_flush_local_all (MPI_Win win);
int MPI_Win_sync (MPI_Win win);
int MPI_Add_error_class (int* errorclass);
int MPI_Add_error_code (int errorclass, int* errorcode);
int MPI_Add_error_string (int errorcode, const(char)* string);
int MPI_Comm_call_errhandler (MPI_Comm comm, int errorcode);
int MPI_Comm_create_keyval (
    int function () comm_copy_attr_fn,
    int function () comm_delete_attr_fn,
    int* comm_keyval,
    void* extra_state);
int MPI_Comm_delete_attr (MPI_Comm comm, int comm_keyval);
int MPI_Comm_free_keyval (int* comm_keyval);
int MPI_Comm_get_attr (MPI_Comm comm, int comm_keyval, void* attribute_val, int* flag);
int MPI_Comm_get_name (MPI_Comm comm, char* comm_name, int* resultlen);
int MPI_Comm_set_attr (MPI_Comm comm, int comm_keyval, void* attribute_val);
int MPI_Comm_set_name (MPI_Comm comm, const(char)* comm_name);
int MPI_File_call_errhandler (MPI_File fh, int errorcode);
int MPI_Grequest_complete (MPI_Request request);
int MPI_Grequest_start (
    int function () query_fn,
    int function () free_fn,
    int function () cancel_fn,
    void* extra_state,
    MPI_Request* request);
int MPI_Init_thread (int* argc, char*** argv, int required, int* provided);
int MPI_Is_thread_main (int* flag);
int MPI_Query_thread (int* provided);
int MPI_Status_set_cancelled (MPI_Status* status, int flag);
int MPI_Status_set_elements (MPI_Status* status, MPI_Datatype datatype, int count);
int MPI_Type_create_keyval (
    int function () type_copy_attr_fn,
    int function () type_delete_attr_fn,
    int* type_keyval,
    void* extra_state);
int MPI_Type_delete_attr (MPI_Datatype datatype, int type_keyval);
int MPI_Type_dup (MPI_Datatype oldtype, MPI_Datatype* newtype);
int MPI_Type_free_keyval (int* type_keyval);
int MPI_Type_get_attr (MPI_Datatype datatype, int type_keyval, void* attribute_val, int* flag);
int MPI_Type_get_contents (
    MPI_Datatype datatype,
    int max_integers,
    int max_addresses,
    int max_datatypes,
    int* array_of_integers,
    MPI_Aint* array_of_addresses,
    MPI_Datatype* array_of_datatypes);
int MPI_Type_get_envelope (
    MPI_Datatype datatype,
    int* num_integers,
    int* num_addresses,
    int* num_datatypes,
    int* combiner);
int MPI_Type_get_name (MPI_Datatype datatype, char* type_name, int* resultlen);
int MPI_Type_set_attr (MPI_Datatype datatype, int type_keyval, void* attribute_val);
int MPI_Type_set_name (MPI_Datatype datatype, const(char)* type_name);
int MPI_Type_match_size (int typeclass, int size, MPI_Datatype* datatype);
int MPI_Win_call_errhandler (MPI_Win win, int errorcode);
int MPI_Win_create_keyval (
    int function () win_copy_attr_fn,
    int function () win_delete_attr_fn,
    int* win_keyval,
    void* extra_state);
int MPI_Win_delete_attr (MPI_Win win, int win_keyval);
int MPI_Win_free_keyval (int* win_keyval);
int MPI_Win_get_attr (MPI_Win win, int win_keyval, void* attribute_val, int* flag);
int MPI_Win_get_name (MPI_Win win, char* win_name, int* resultlen);
int MPI_Win_set_attr (MPI_Win win, int win_keyval, void* attribute_val);
int MPI_Win_set_name (MPI_Win win, const(char)* win_name);
int MPI_Alloc_mem (MPI_Aint size, MPI_Info info, void* baseptr);
//int MPI_Comm_create_errhandler (
//    void function (...) comm_errhandler_fn,
//    MPI_Errhandler* errhandler);
int MPI_Comm_get_errhandler (MPI_Comm comm, MPI_Errhandler* errhandler);
int MPI_Comm_set_errhandler (MPI_Comm comm, MPI_Errhandler errhandler);
//int MPI_File_create_errhandler (
//    void function (...) file_errhandler_fn,
//    MPI_Errhandler* errhandler);
int MPI_File_get_errhandler (MPI_File file, MPI_Errhandler* errhandler);
int MPI_File_set_errhandler (MPI_File file, MPI_Errhandler errhandler);
int MPI_Finalized (int* flag);
int MPI_Free_mem (void* base);
int MPI_Get_address (const(void)* location, MPI_Aint* address);
int MPI_Info_create (MPI_Info* info);
int MPI_Info_delete (MPI_Info info, const(char)* key);
int MPI_Info_dup (MPI_Info info, MPI_Info* newinfo);
int MPI_Info_free (MPI_Info* info);
int MPI_Info_get (MPI_Info info, const(char)* key, int valuelen, char* value, int* flag);
int MPI_Info_get_nkeys (MPI_Info info, int* nkeys);
int MPI_Info_get_nthkey (MPI_Info info, int n, char* key);
int MPI_Info_get_valuelen (MPI_Info info, const(char)* key, int* valuelen, int* flag);
int MPI_Info_set (MPI_Info info, const(char)* key, const(char)* value);
int MPI_Pack_external (
    const(char)* datarep,
    const(void)* inbuf,
    int incount,
    MPI_Datatype datatype,
    void* outbuf,
    MPI_Aint outsize,
    MPI_Aint* position);

int MPI_Pack_external_size (
    const(char)* datarep,
    int incount,
    MPI_Datatype datatype,
    MPI_Aint* size);
int MPI_Request_get_status (MPI_Request request, int* flag, MPI_Status* status);
int MPI_Status_c2f (const(MPI_Status)* c_status, MPI_Fint* f_status);
int MPI_Status_f2c (const(MPI_Fint)* f_status, MPI_Status* c_status);
int MPI_Type_create_darray (
    int size,
    int rank,
    int ndims,
    const(int)* array_of_gsizes,
    const(int)* array_of_distribs,
    const(int)* array_of_dargs,
    const(int)* array_of_psizes,
    int order,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int MPI_Type_create_hindexed (
    int count,
    const(int)* array_of_blocklengths,
    const(MPI_Aint)* array_of_displacements,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int MPI_Type_create_hvector (
    int count,
    int blocklength,
    MPI_Aint stride,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int MPI_Type_create_indexed_block (
    int count,
    int blocklength,
    const(int)* array_of_displacements,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int MPI_Type_create_hindexed_block (
    int count,
    int blocklength,
    const(MPI_Aint)* array_of_displacements,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int MPI_Type_create_resized (
    MPI_Datatype oldtype,
    MPI_Aint lb,
    MPI_Aint extent,
    MPI_Datatype* newtype);
int MPI_Type_create_struct (
    int count,
    const(int)* array_of_blocklengths,
    const(MPI_Aint)* array_of_displacements,
    const(MPI_Datatype)* array_of_types,
    MPI_Datatype* newtype);
int MPI_Type_create_subarray (
    int ndims,
    const(int)* array_of_sizes,
    const(int)* array_of_subsizes,
    const(int)* array_of_starts,
    int order,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int MPI_Type_get_extent (MPI_Datatype datatype, MPI_Aint* lb, MPI_Aint* extent);
int MPI_Type_get_true_extent (MPI_Datatype datatype, MPI_Aint* true_lb, MPI_Aint* true_extent);
int MPI_Unpack_external (
    const(char)* datarep,
    const(void)* inbuf,
    MPI_Aint insize,
    MPI_Aint* position,
    void* outbuf,
    int outcount,
    MPI_Datatype datatype);

//int MPI_Win_create_errhandler (
//    void function (...) win_errhandler_fn,
//    MPI_Errhandler* errhandler);
int MPI_Win_get_errhandler (MPI_Win win, MPI_Errhandler* errhandler);
int MPI_Win_set_errhandler (MPI_Win win, MPI_Errhandler errhandler);
int MPI_Type_create_f90_integer (int range, MPI_Datatype* newtype);
int MPI_Type_create_f90_real (int precision, int range, MPI_Datatype* newtype);
int MPI_Type_create_f90_complex (int precision, int range, MPI_Datatype* newtype);
int MPI_Reduce_local (
    const(void)* inbuf,
    void* inoutbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op);

int MPI_Op_commutative (MPI_Op op, int* commute);
int MPI_Reduce_scatter_block (
    const(void)* sendbuf,
    void* recvbuf,
    int recvcount,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm);

int MPI_Dist_graph_create_adjacent (
    MPI_Comm comm_old,
    int indegree,
    const(int)* sources,
    const(int)* sourceweights,
    int outdegree,
    const(int)* destinations,
    const(int)* destweights,
    MPI_Info info,
    int reorder,
    MPI_Comm* comm_dist_graph);
int MPI_Dist_graph_create (
    MPI_Comm comm_old,
    int n,
    const(int)* sources,
    const(int)* degrees,
    const(int)* destinations,
    const(int)* weights,
    MPI_Info info,
    int reorder,
    MPI_Comm* comm_dist_graph);
int MPI_Dist_graph_neighbors_count (MPI_Comm comm, int* indegree, int* outdegree, int* weighted);
int MPI_Dist_graph_neighbors (
    MPI_Comm comm,
    int maxindegree,
    int* sources,
    int* sourceweights,
    int maxoutdegree,
    int* destinations,
    int* destweights);
int MPI_Improbe (
    int source,
    int tag,
    MPI_Comm comm,
    int* flag,
    MPI_Message* message,
    MPI_Status* status);
int MPI_Imrecv (
    void* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Message* message,
    MPI_Request* request);
int MPI_Mprobe (int source, int tag, MPI_Comm comm, MPI_Message* message, MPI_Status* status);
int MPI_Mrecv (
    void* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Message* message,
    MPI_Status* status);
int MPI_Comm_idup (MPI_Comm comm, MPI_Comm* newcomm, MPI_Request* request);
int MPI_Ibarrier (MPI_Comm comm, MPI_Request* request);
int MPI_Ibcast (
    void* buffer,
    int count,
    MPI_Datatype datatype,
    int root,
    MPI_Comm comm,
    MPI_Request* request);
int MPI_Igather (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    int root,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Igatherv (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* displs,
    MPI_Datatype recvtype,
    int root,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Iscatter (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    int root,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Iscatterv (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(int)* displs,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    int root,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Iallgather (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Iallgatherv (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* displs,
    MPI_Datatype recvtype,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Ialltoall (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Ialltoallv (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(int)* sdispls,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* rdispls,
    MPI_Datatype recvtype,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Ialltoallw (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(int)* sdispls,
    const(MPI_Datatype)* sendtypes,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* rdispls,
    const(MPI_Datatype)* recvtypes,
    MPI_Comm comm,
    MPI_Request* request);
int MPI_Ireduce (
    const(void)* sendbuf,
    void* recvbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op,
    int root,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Iallreduce (
    const(void)* sendbuf,
    void* recvbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Ireduce_scatter (
    const(void)* sendbuf,
    void* recvbuf,
    const(int)* recvcounts,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Ireduce_scatter_block (
    const(void)* sendbuf,
    void* recvbuf,
    int recvcount,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Iscan (
    const(void)* sendbuf,
    void* recvbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Iexscan (
    const(void)* sendbuf,
    void* recvbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Ineighbor_allgather (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Ineighbor_allgatherv (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* displs,
    MPI_Datatype recvtype,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Ineighbor_alltoall (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Ineighbor_alltoallv (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(int)* sdispls,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* rdispls,
    MPI_Datatype recvtype,
    MPI_Comm comm,
    MPI_Request* request);

int MPI_Ineighbor_alltoallw (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(MPI_Aint)* sdispls,
    const(MPI_Datatype)* sendtypes,
    void* recvbuf,
    const(int)* recvcounts,
    const(MPI_Aint)* rdispls,
    const(MPI_Datatype)* recvtypes,
    MPI_Comm comm,
    MPI_Request* request);
int MPI_Neighbor_allgather (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    MPI_Comm comm);

int MPI_Neighbor_allgatherv (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* displs,
    MPI_Datatype recvtype,
    MPI_Comm comm);

int MPI_Neighbor_alltoall (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    MPI_Comm comm);

int MPI_Neighbor_alltoallv (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(int)* sdispls,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* rdispls,
    MPI_Datatype recvtype,
    MPI_Comm comm);

int MPI_Neighbor_alltoallw (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(MPI_Aint)* sdispls,
    const(MPI_Datatype)* sendtypes,
    void* recvbuf,
    const(int)* recvcounts,
    const(MPI_Aint)* rdispls,
    const(MPI_Datatype)* recvtypes,
    MPI_Comm comm);
int MPI_Comm_split_type (MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm* newcomm);
int MPI_Get_elements_x (const(MPI_Status)* status, MPI_Datatype datatype, MPI_Count* count);
int MPI_Status_set_elements_x (MPI_Status* status, MPI_Datatype datatype, MPI_Count count);
int MPI_Type_get_extent_x (MPI_Datatype datatype, MPI_Count* lb, MPI_Count* extent);
int MPI_Type_get_true_extent_x (MPI_Datatype datatype, MPI_Count* lb, MPI_Count* extent);
int MPI_Type_size_x (MPI_Datatype datatype, MPI_Count* size);
int MPI_Comm_create_group (MPI_Comm comm, MPI_Group group, int tag, MPI_Comm* newcomm);
MPI_Aint MPI_Aint_add (MPI_Aint base, MPI_Aint disp);
MPI_Aint MPI_Aint_diff (MPI_Aint addr1, MPI_Aint addr2);
int MPI_T_init_thread (int required, int* provided);
int MPI_T_finalize ();
int MPI_T_enum_get_info (MPI_T_enum enumtype, int* num, char* name, int* name_len);
int MPI_T_enum_get_item (MPI_T_enum enumtype, int indx, int* value, char* name, int* name_len);
int MPI_T_cvar_get_num (int* num_cvar);
int MPI_T_cvar_get_info (
    int cvar_index,
    char* name,
    int* name_len,
    int* verbosity,
    MPI_Datatype* datatype,
    MPI_T_enum* enumtype,
    char* desc,
    int* desc_len,
    int* binding,
    int* scope_);
int MPI_T_cvar_handle_alloc (
    int cvar_index,
    void* obj_handle,
    MPI_T_cvar_handle* handle,
    int* count);
int MPI_T_cvar_handle_free (MPI_T_cvar_handle* handle);
int MPI_T_cvar_read (MPI_T_cvar_handle handle, void* buf);
int MPI_T_cvar_write (MPI_T_cvar_handle handle, const(void)* buf);
int MPI_T_pvar_get_num (int* num_pvar);
int MPI_T_pvar_get_info (
    int pvar_index,
    char* name,
    int* name_len,
    int* verbosity,
    int* var_class,
    MPI_Datatype* datatype,
    MPI_T_enum* enumtype,
    char* desc,
    int* desc_len,
    int* binding,
    int* readonly,
    int* continuous,
    int* atomic);
int MPI_T_pvar_session_create (MPI_T_pvar_session* session);
int MPI_T_pvar_session_free (MPI_T_pvar_session* session);
int MPI_T_pvar_handle_alloc (
    MPI_T_pvar_session session,
    int pvar_index,
    void* obj_handle,
    MPI_T_pvar_handle* handle,
    int* count);
int MPI_T_pvar_handle_free (MPI_T_pvar_session session, MPI_T_pvar_handle* handle);
int MPI_T_pvar_start (MPI_T_pvar_session session, MPI_T_pvar_handle handle);
int MPI_T_pvar_stop (MPI_T_pvar_session session, MPI_T_pvar_handle handle);
int MPI_T_pvar_read (MPI_T_pvar_session session, MPI_T_pvar_handle handle, void* buf);
int MPI_T_pvar_write (MPI_T_pvar_session session, MPI_T_pvar_handle handle, const(void)* buf);
int MPI_T_pvar_reset (MPI_T_pvar_session session, MPI_T_pvar_handle handle);
int MPI_T_pvar_readreset (MPI_T_pvar_session session, MPI_T_pvar_handle handle, void* buf);
int MPI_T_category_get_num (int* num_cat);
int MPI_T_category_get_info (
    int cat_index,
    char* name,
    int* name_len,
    char* desc,
    int* desc_len,
    int* num_cvars,
    int* num_pvars,
    int* num_categories);
int MPI_T_category_get_cvars (int cat_index, int len, int* indices);
int MPI_T_category_get_pvars (int cat_index, int len, int* indices);
int MPI_T_category_get_categories (int cat_index, int len, int* indices);
int MPI_T_category_changed (int* stamp);
int MPI_T_cvar_get_index (const(char)* name, int* cvar_index);
int MPI_T_pvar_get_index (const(char)* name, int var_class, int* pvar_index);
int MPI_T_category_get_index (const(char)* name, int* cat_index);
int MPIX_Comm_failure_ack (MPI_Comm comm);
int MPIX_Comm_failure_get_acked (MPI_Comm comm, MPI_Group* failedgrp);
int MPIX_Comm_revoke (MPI_Comm comm);
int MPIX_Comm_shrink (MPI_Comm comm, MPI_Comm* newcomm);
int MPIX_Comm_agree (MPI_Comm comm, int* flag);
int PMPI_Send (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm);
int PMPI_Recv (
    void* buf,
    int count,
    MPI_Datatype datatype,
    int source,
    int tag,
    MPI_Comm comm,
    MPI_Status* status);
int PMPI_Get_count (const(MPI_Status)* status, MPI_Datatype datatype, int* count);
int PMPI_Bsend (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm);
int PMPI_Ssend (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm);
int PMPI_Rsend (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm);
int PMPI_Buffer_attach (void* buffer, int size);
int PMPI_Buffer_detach (void* buffer_addr, int* size);
int PMPI_Isend (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int PMPI_Ibsend (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int PMPI_Issend (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int PMPI_Irsend (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int PMPI_Irecv (
    void* buf,
    int count,
    MPI_Datatype datatype,
    int source,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int PMPI_Wait (MPI_Request* request, MPI_Status* status);
int PMPI_Test (MPI_Request* request, int* flag, MPI_Status* status);
int PMPI_Request_free (MPI_Request* request);
int PMPI_Waitany (int count, MPI_Request* array_of_requests, int* indx, MPI_Status* status);
int PMPI_Testany (
    int count,
    MPI_Request* array_of_requests,
    int* indx,
    int* flag,
    MPI_Status* status);
int PMPI_Waitall (int count, MPI_Request* array_of_requests, MPI_Status* array_of_statuses);
int PMPI_Testall (
    int count,
    MPI_Request* array_of_requests,
    int* flag,
    MPI_Status* array_of_statuses);
int PMPI_Waitsome (
    int incount,
    MPI_Request* array_of_requests,
    int* outcount,
    int* array_of_indices,
    MPI_Status* array_of_statuses);
int PMPI_Testsome (
    int incount,
    MPI_Request* array_of_requests,
    int* outcount,
    int* array_of_indices,
    MPI_Status* array_of_statuses);
int PMPI_Iprobe (int source, int tag, MPI_Comm comm, int* flag, MPI_Status* status);
int PMPI_Probe (int source, int tag, MPI_Comm comm, MPI_Status* status);
int PMPI_Cancel (MPI_Request* request);
int PMPI_Test_cancelled (const(MPI_Status)* status, int* flag);
int PMPI_Send_init (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int PMPI_Bsend_init (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int PMPI_Ssend_init (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int PMPI_Rsend_init (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int PMPI_Recv_init (
    void* buf,
    int count,
    MPI_Datatype datatype,
    int source,
    int tag,
    MPI_Comm comm,
    MPI_Request* request);
int PMPI_Start (MPI_Request* request);
int PMPI_Startall (int count, MPI_Request* array_of_requests);
int PMPI_Sendrecv (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    int dest,
    int sendtag,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    int source,
    int recvtag,
    MPI_Comm comm,
    MPI_Status* status);

int PMPI_Sendrecv_replace (
    void* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int sendtag,
    int source,
    int recvtag,
    MPI_Comm comm,
    MPI_Status* status);
int PMPI_Type_contiguous (int count, MPI_Datatype oldtype, MPI_Datatype* newtype);
int PMPI_Type_vector (
    int count,
    int blocklength,
    int stride,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int PMPI_Type_hvector (
    int count,
    int blocklength,
    MPI_Aint stride,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int PMPI_Type_indexed (
    int count,
    const(int)* array_of_blocklengths,
    const(int)* array_of_displacements,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int PMPI_Type_hindexed (
    int count,
    int* array_of_blocklengths,
    MPI_Aint* array_of_displacements,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int PMPI_Type_struct (
    int count,
    int* array_of_blocklengths,
    MPI_Aint* array_of_displacements,
    MPI_Datatype* array_of_types,
    MPI_Datatype* newtype);
int PMPI_Address (void* location, MPI_Aint* address);
int PMPI_Type_extent (MPI_Datatype datatype, MPI_Aint* extent);
int PMPI_Type_size (MPI_Datatype datatype, int* size);
int PMPI_Type_lb (MPI_Datatype datatype, MPI_Aint* displacement);
int PMPI_Type_ub (MPI_Datatype datatype, MPI_Aint* displacement);
int PMPI_Type_commit (MPI_Datatype* datatype);
int PMPI_Type_free (MPI_Datatype* datatype);
int PMPI_Get_elements (const(MPI_Status)* status, MPI_Datatype datatype, int* count);
int PMPI_Pack (
    const(void)* inbuf,
    int incount,
    MPI_Datatype datatype,
    void* outbuf,
    int outsize,
    int* position,
    MPI_Comm comm);
int PMPI_Unpack (
    const(void)* inbuf,
    int insize,
    int* position,
    void* outbuf,
    int outcount,
    MPI_Datatype datatype,
    MPI_Comm comm);
int PMPI_Pack_size (int incount, MPI_Datatype datatype, MPI_Comm comm, int* size);
int PMPI_Barrier (MPI_Comm comm);
int PMPI_Bcast (void* buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm);

int PMPI_Gather (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    int root,
    MPI_Comm comm);

int PMPI_Gatherv (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* displs,
    MPI_Datatype recvtype,
    int root,
    MPI_Comm comm);

int PMPI_Scatter (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    int root,
    MPI_Comm comm);

int PMPI_Scatterv (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(int)* displs,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    int root,
    MPI_Comm comm);

int PMPI_Allgather (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    MPI_Comm comm);

int PMPI_Allgatherv (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* displs,
    MPI_Datatype recvtype,
    MPI_Comm comm);

int PMPI_Alltoall (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    MPI_Comm comm);

int PMPI_Alltoallv (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(int)* sdispls,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* rdispls,
    MPI_Datatype recvtype,
    MPI_Comm comm);

int PMPI_Alltoallw (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(int)* sdispls,
    const(MPI_Datatype)* sendtypes,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* rdispls,
    const(MPI_Datatype)* recvtypes,
    MPI_Comm comm);
int PMPI_Exscan (
    const(void)* sendbuf,
    void* recvbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm);

int PMPI_Reduce (
    const(void)* sendbuf,
    void* recvbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op,
    int root,
    MPI_Comm comm);

int PMPI_Op_create (void function () user_fn, int commute, MPI_Op* op);
int PMPI_Op_free (MPI_Op* op);
int PMPI_Allreduce (
    const(void)* sendbuf,
    void* recvbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm);

int PMPI_Reduce_scatter (
    const(void)* sendbuf,
    void* recvbuf,
    const(int)* recvcounts,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm);

int PMPI_Scan (
    const(void)* sendbuf,
    void* recvbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm);

int PMPI_Group_size (MPI_Group group, int* size);
int PMPI_Group_rank (MPI_Group group, int* rank);
int PMPI_Group_translate_ranks (
    MPI_Group group1,
    int n,
    const(int)* ranks1,
    MPI_Group group2,
    int* ranks2);
int PMPI_Group_compare (MPI_Group group1, MPI_Group group2, int* result);
int PMPI_Comm_group (MPI_Comm comm, MPI_Group* group);
int PMPI_Group_union (MPI_Group group1, MPI_Group group2, MPI_Group* newgroup);
int PMPI_Group_intersection (MPI_Group group1, MPI_Group group2, MPI_Group* newgroup);
int PMPI_Group_difference (MPI_Group group1, MPI_Group group2, MPI_Group* newgroup);
int PMPI_Group_incl (MPI_Group group, int n, const(int)* ranks, MPI_Group* newgroup);
int PMPI_Group_excl (MPI_Group group, int n, const(int)* ranks, MPI_Group* newgroup);
int PMPI_Group_range_incl (MPI_Group group, int n, ref int[3]* ranges, MPI_Group* newgroup);
int PMPI_Group_range_excl (MPI_Group group, int n, ref int[3]* ranges, MPI_Group* newgroup);
int PMPI_Group_free (MPI_Group* group);
int PMPI_Comm_size (MPI_Comm comm, int* size);
int PMPI_Comm_rank (MPI_Comm comm, int* rank);
int PMPI_Comm_compare (MPI_Comm comm1, MPI_Comm comm2, int* result);
int PMPI_Comm_dup (MPI_Comm comm, MPI_Comm* newcomm);
int PMPI_Comm_dup_with_info (MPI_Comm comm, MPI_Info info, MPI_Comm* newcomm);
int PMPI_Comm_create (MPI_Comm comm, MPI_Group group, MPI_Comm* newcomm);
int PMPI_Comm_split (MPI_Comm comm, int color, int key, MPI_Comm* newcomm);
int PMPI_Comm_free (MPI_Comm* comm);
int PMPI_Comm_test_inter (MPI_Comm comm, int* flag);
int PMPI_Comm_remote_size (MPI_Comm comm, int* size);
int PMPI_Comm_remote_group (MPI_Comm comm, MPI_Group* group);
int PMPI_Intercomm_create (
    MPI_Comm local_comm,
    int local_leader,
    MPI_Comm peer_comm,
    int remote_leader,
    int tag,
    MPI_Comm* newintercomm);
int PMPI_Intercomm_merge (MPI_Comm intercomm, int high, MPI_Comm* newintracomm);
int PMPI_Keyval_create (
    int function () copy_fn,
    int function () delete_fn,
    int* keyval,
    void* extra_state);
int PMPI_Keyval_free (int* keyval);
int PMPI_Attr_put (MPI_Comm comm, int keyval, void* attribute_val);
int PMPI_Attr_get (MPI_Comm comm, int keyval, void* attribute_val, int* flag);
int PMPI_Attr_delete (MPI_Comm comm, int keyval);
int PMPI_Topo_test (MPI_Comm comm, int* status);
int PMPI_Cart_create (
    MPI_Comm comm_old,
    int ndims,
    const(int)* dims,
    const(int)* periods,
    int reorder,
    MPI_Comm* comm_cart);
int PMPI_Dims_create (int nnodes, int ndims, int* dims);
int PMPI_Graph_create (
    MPI_Comm comm_old,
    int nnodes,
    const(int)* indx,
    const(int)* edges,
    int reorder,
    MPI_Comm* comm_graph);
int PMPI_Graphdims_get (MPI_Comm comm, int* nnodes, int* nedges);
int PMPI_Graph_get (MPI_Comm comm, int maxindex, int maxedges, int* indx, int* edges);
int PMPI_Cartdim_get (MPI_Comm comm, int* ndims);
int PMPI_Cart_get (MPI_Comm comm, int maxdims, int* dims, int* periods, int* coords);
int PMPI_Cart_rank (MPI_Comm comm, const(int)* coords, int* rank);
int PMPI_Cart_coords (MPI_Comm comm, int rank, int maxdims, int* coords);
int PMPI_Graph_neighbors_count (MPI_Comm comm, int rank, int* nneighbors);
int PMPI_Graph_neighbors (MPI_Comm comm, int rank, int maxneighbors, int* neighbors);
int PMPI_Cart_shift (MPI_Comm comm, int direction, int disp, int* rank_source, int* rank_dest);
int PMPI_Cart_sub (MPI_Comm comm, const(int)* remain_dims, MPI_Comm* newcomm);
int PMPI_Cart_map (MPI_Comm comm, int ndims, const(int)* dims, const(int)* periods, int* newrank);
int PMPI_Graph_map (MPI_Comm comm, int nnodes, const(int)* indx, const(int)* edges, int* newrank);
int PMPI_Get_processor_name (char* name, int* resultlen);
int PMPI_Get_version (int* version_, int* subversion);
int PMPI_Get_library_version (char* version_, int* resultlen);
//int PMPI_Errhandler_create (void function (...) function_, MPI_Errhandler* errhandler);
int PMPI_Errhandler_set (MPI_Comm comm, MPI_Errhandler errhandler);
int PMPI_Errhandler_get (MPI_Comm comm, MPI_Errhandler* errhandler);
int PMPI_Errhandler_free (MPI_Errhandler* errhandler);
int PMPI_Error_string (int errorcode, char* string, int* resultlen);
int PMPI_Error_class (int errorcode, int* errorclass);
double PMPI_Wtime ();
double PMPI_Wtick ();
int PMPI_Init (int* argc, char*** argv);
int PMPI_Finalize ();
int PMPI_Initialized (int* flag);
int PMPI_Abort (MPI_Comm comm, int errorcode);
//int PMPI_Pcontrol (const int level, ...);
int PMPI_Close_port (const(char)* port_name);
int PMPI_Comm_accept (
    const(char)* port_name,
    MPI_Info info,
    int root,
    MPI_Comm comm,
    MPI_Comm* newcomm);
int PMPI_Comm_connect (
    const(char)* port_name,
    MPI_Info info,
    int root,
    MPI_Comm comm,
    MPI_Comm* newcomm);
int PMPI_Comm_disconnect (MPI_Comm* comm);
int PMPI_Comm_get_parent (MPI_Comm* parent);
int PMPI_Comm_join (int fd, MPI_Comm* intercomm);
int PMPI_Comm_spawn (
    const(char)* command,
    char** argv,
    int maxprocs,
    MPI_Info info,
    int root,
    MPI_Comm comm,
    MPI_Comm* intercomm,
    int* array_of_errcodes);
int PMPI_Comm_spawn_multiple (
    int count,
    char** array_of_commands,
    char*** array_of_argv,
    const(int)* array_of_maxprocs,
    const(MPI_Info)* array_of_info,
    int root,
    MPI_Comm comm,
    MPI_Comm* intercomm,
    int* array_of_errcodes);
int PMPI_Lookup_name (const(char)* service_name, MPI_Info info, char* port_name);
int PMPI_Open_port (MPI_Info info, char* port_name);
int PMPI_Publish_name (const(char)* service_name, MPI_Info info, const(char)* port_name);
int PMPI_Unpublish_name (const(char)* service_name, MPI_Info info, const(char)* port_name);
int PMPI_Comm_set_info (MPI_Comm comm, MPI_Info info);
int PMPI_Comm_get_info (MPI_Comm comm, MPI_Info* info);
int PMPIX_Comm_rankpool (MPI_Comm comm, const(char)* name, int timeout);
int PMPIX_GPU_query_support (int gpu_type, int* is_supported);
int PMPIX_Query_cuda_support ();
int PMPIX_Create_queue (MPI_Comm comm, void* stream, MPIX_Queue* queue);
int PMPIX_Free_queue (MPIX_Queue queue);
int PMPIX_Enqueue_send (
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    int dest,
    int tag,
    MPIX_Queue queue,
    MPI_Request* request);
int PMPIX_Enqueue_recv (
    void* buf,
    int count,
    MPI_Datatype datatype,
    int source,
    int tag,
    MPIX_Queue queue,
    MPI_Request* request);
int PMPIX_Enqueue_start (const MPIX_Queue queue);
int PMPIX_Enqueue_wait (const MPIX_Queue queue);
int PMPIX_KT_Get_dreq (MPI_Request request, MPIX_Drequest* drequest);
int PMPIX_Win_post_stream (MPI_Group group, MPI_Win win, void* stream);
int PMPIX_Win_complete_stream (MPI_Win win, void* stream);
int PMPIX_Win_wait_stream (MPI_Win win, void* stream);
int PMPIX_Win_progress_stream (MPI_Win win);
int PMPI_Accumulate (
    const(void)* origin_addr,
    int origin_count,
    MPI_Datatype origin_datatype,
    int target_rank,
    MPI_Aint target_disp,
    int target_count,
    MPI_Datatype target_datatype,
    MPI_Op op,
    MPI_Win win);

int PMPI_Get (
    void* origin_addr,
    int origin_count,
    MPI_Datatype origin_datatype,
    int target_rank,
    MPI_Aint target_disp,
    int target_count,
    MPI_Datatype target_datatype,
    MPI_Win win);
int PMPI_Put (
    const(void)* origin_addr,
    int origin_count,
    MPI_Datatype origin_datatype,
    int target_rank,
    MPI_Aint target_disp,
    int target_count,
    MPI_Datatype target_datatype,
    MPI_Win win);
int PMPI_Win_complete (MPI_Win win);
int PMPI_Win_create (
    void* base,
    MPI_Aint size,
    int disp_unit,
    MPI_Info info,
    MPI_Comm comm,
    MPI_Win* win);
int PMPI_Win_fence (int assert_, MPI_Win win);
int PMPI_Win_free (MPI_Win* win);
int PMPI_Win_get_group (MPI_Win win, MPI_Group* group);
int PMPI_Win_lock (int lock_type, int rank, int assert_, MPI_Win win);
int PMPI_Win_post (MPI_Group group, int assert_, MPI_Win win);
int PMPI_Win_start (MPI_Group group, int assert_, MPI_Win win);
int PMPI_Win_test (MPI_Win win, int* flag);
int PMPI_Win_unlock (int rank, MPI_Win win);
int PMPI_Win_wait (MPI_Win win);
int PMPI_Win_allocate (
    MPI_Aint size,
    int disp_unit,
    MPI_Info info,
    MPI_Comm comm,
    void* baseptr,
    MPI_Win* win);
int PMPI_Win_allocate_shared (
    MPI_Aint size,
    int disp_unit,
    MPI_Info info,
    MPI_Comm comm,
    void* baseptr,
    MPI_Win* win);
int PMPI_Win_shared_query (MPI_Win win, int rank, MPI_Aint* size, int* disp_unit, void* baseptr);
int PMPI_Win_create_dynamic (MPI_Info info, MPI_Comm comm, MPI_Win* win);
int PMPI_Win_attach (MPI_Win win, void* base, MPI_Aint size);
int PMPI_Win_detach (MPI_Win win, const(void)* base);
int PMPI_Win_get_info (MPI_Win win, MPI_Info* info_used);
int PMPI_Win_set_info (MPI_Win win, MPI_Info info);
int PMPI_Get_accumulate (
    const(void)* origin_addr,
    int origin_count,
    MPI_Datatype origin_datatype,
    void* result_addr,
    int result_count,
    MPI_Datatype result_datatype,
    int target_rank,
    MPI_Aint target_disp,
    int target_count,
    MPI_Datatype target_datatype,
    MPI_Op op,
    MPI_Win win);

int PMPI_Fetch_and_op (
    const(void)* origin_addr,
    void* result_addr,
    MPI_Datatype datatype,
    int target_rank,
    MPI_Aint target_disp,
    MPI_Op op,
    MPI_Win win);

int PMPI_Compare_and_swap (
    const(void)* origin_addr,
    const(void)* compare_addr,
    void* result_addr,
    MPI_Datatype datatype,
    int target_rank,
    MPI_Aint target_disp,
    MPI_Win win);

int PMPI_Rput (
    const(void)* origin_addr,
    int origin_count,
    MPI_Datatype origin_datatype,
    int target_rank,
    MPI_Aint target_disp,
    int target_count,
    MPI_Datatype target_datatype,
    MPI_Win win,
    MPI_Request* request);

int PMPI_Rget (
    void* origin_addr,
    int origin_count,
    MPI_Datatype origin_datatype,
    int target_rank,
    MPI_Aint target_disp,
    int target_count,
    MPI_Datatype target_datatype,
    MPI_Win win,
    MPI_Request* request);

int PMPI_Raccumulate (
    const(void)* origin_addr,
    int origin_count,
    MPI_Datatype origin_datatype,
    int target_rank,
    MPI_Aint target_disp,
    int target_count,
    MPI_Datatype target_datatype,
    MPI_Op op,
    MPI_Win win,
    MPI_Request* request);

int PMPI_Rget_accumulate (
    const(void)* origin_addr,
    int origin_count,
    MPI_Datatype origin_datatype,
    void* result_addr,
    int result_count,
    MPI_Datatype result_datatype,
    int target_rank,
    MPI_Aint target_disp,
    int target_count,
    MPI_Datatype target_datatype,
    MPI_Op op,
    MPI_Win win,
    MPI_Request* request);

int PMPI_Win_lock_all (int assert_, MPI_Win win);
int PMPI_Win_unlock_all (MPI_Win win);
int PMPI_Win_flush (int rank, MPI_Win win);
int PMPI_Win_flush_all (MPI_Win win);
int PMPI_Win_flush_local (int rank, MPI_Win win);
int PMPI_Win_flush_local_all (MPI_Win win);
int PMPI_Win_sync (MPI_Win win);
int PMPI_Add_error_class (int* errorclass);
int PMPI_Add_error_code (int errorclass, int* errorcode);
int PMPI_Add_error_string (int errorcode, const(char)* string);
int PMPI_Comm_call_errhandler (MPI_Comm comm, int errorcode);
int PMPI_Comm_create_keyval (
    int function () comm_copy_attr_fn,
    int function () comm_delete_attr_fn,
    int* comm_keyval,
    void* extra_state);
int PMPI_Comm_delete_attr (MPI_Comm comm, int comm_keyval);
int PMPI_Comm_free_keyval (int* comm_keyval);
int PMPI_Comm_get_attr (MPI_Comm comm, int comm_keyval, void* attribute_val, int* flag);
int PMPI_Comm_get_name (MPI_Comm comm, char* comm_name, int* resultlen);
int PMPI_Comm_set_attr (MPI_Comm comm, int comm_keyval, void* attribute_val);
int PMPI_Comm_set_name (MPI_Comm comm, const(char)* comm_name);
int PMPI_File_call_errhandler (MPI_File fh, int errorcode);
int PMPI_Grequest_complete (MPI_Request request);
int PMPI_Grequest_start (
    int function () query_fn,
    int function () free_fn,
    int function () cancel_fn,
    void* extra_state,
    MPI_Request* request);
int PMPI_Init_thread (int* argc, char*** argv, int required, int* provided);
int PMPI_Is_thread_main (int* flag);
int PMPI_Query_thread (int* provided);
int PMPI_Status_set_cancelled (MPI_Status* status, int flag);
int PMPI_Status_set_elements (MPI_Status* status, MPI_Datatype datatype, int count);
int PMPI_Type_create_keyval (
    int function () type_copy_attr_fn,
    int function () type_delete_attr_fn,
    int* type_keyval,
    void* extra_state);
int PMPI_Type_delete_attr (MPI_Datatype datatype, int type_keyval);
int PMPI_Type_dup (MPI_Datatype oldtype, MPI_Datatype* newtype);
int PMPI_Type_free_keyval (int* type_keyval);
int PMPI_Type_get_attr (MPI_Datatype datatype, int type_keyval, void* attribute_val, int* flag);
int PMPI_Type_get_contents (
    MPI_Datatype datatype,
    int max_integers,
    int max_addresses,
    int max_datatypes,
    int* array_of_integers,
    MPI_Aint* array_of_addresses,
    MPI_Datatype* array_of_datatypes);
int PMPI_Type_get_envelope (
    MPI_Datatype datatype,
    int* num_integers,
    int* num_addresses,
    int* num_datatypes,
    int* combiner);
int PMPI_Type_get_name (MPI_Datatype datatype, char* type_name, int* resultlen);
int PMPI_Type_set_attr (MPI_Datatype datatype, int type_keyval, void* attribute_val);
int PMPI_Type_set_name (MPI_Datatype datatype, const(char)* type_name);
int PMPI_Type_match_size (int typeclass, int size, MPI_Datatype* datatype);
int PMPI_Win_call_errhandler (MPI_Win win, int errorcode);
int PMPI_Win_create_keyval (
    int function () win_copy_attr_fn,
    int function () win_delete_attr_fn,
    int* win_keyval,
    void* extra_state);
int PMPI_Win_delete_attr (MPI_Win win, int win_keyval);
int PMPI_Win_free_keyval (int* win_keyval);
int PMPI_Win_get_attr (MPI_Win win, int win_keyval, void* attribute_val, int* flag);
int PMPI_Win_get_name (MPI_Win win, char* win_name, int* resultlen);
int PMPI_Win_set_attr (MPI_Win win, int win_keyval, void* attribute_val);
int PMPI_Win_set_name (MPI_Win win, const(char)* win_name);
int PMPI_Alloc_mem (MPI_Aint size, MPI_Info info, void* baseptr);
//int PMPI_Comm_create_errhandler (
//    void function (...) comm_errhandler_fn,
//    MPI_Errhandler* errhandler);
int PMPI_Comm_get_errhandler (MPI_Comm comm, MPI_Errhandler* errhandler);
int PMPI_Comm_set_errhandler (MPI_Comm comm, MPI_Errhandler errhandler);
//int PMPI_File_create_errhandler (
//    void function (...) file_errhandler_fn,
//    MPI_Errhandler* errhandler);
int PMPI_File_get_errhandler (MPI_File file, MPI_Errhandler* errhandler);
int PMPI_File_set_errhandler (MPI_File file, MPI_Errhandler errhandler);
int PMPI_Finalized (int* flag);
int PMPI_Free_mem (void* base);
int PMPI_Get_address (const(void)* location, MPI_Aint* address);
int PMPI_Info_create (MPI_Info* info);
int PMPI_Info_delete (MPI_Info info, const(char)* key);
int PMPI_Info_dup (MPI_Info info, MPI_Info* newinfo);
int PMPI_Info_free (MPI_Info* info);
int PMPI_Info_get (MPI_Info info, const(char)* key, int valuelen, char* value, int* flag);
int PMPI_Info_get_nkeys (MPI_Info info, int* nkeys);
int PMPI_Info_get_nthkey (MPI_Info info, int n, char* key);
int PMPI_Info_get_valuelen (MPI_Info info, const(char)* key, int* valuelen, int* flag);
int PMPI_Info_set (MPI_Info info, const(char)* key, const(char)* value);
int PMPI_Pack_external (
    const(char)* datarep,
    const(void)* inbuf,
    int incount,
    MPI_Datatype datatype,
    void* outbuf,
    MPI_Aint outsize,
    MPI_Aint* position);

int PMPI_Pack_external_size (
    const(char)* datarep,
    int incount,
    MPI_Datatype datatype,
    MPI_Aint* size);
int PMPI_Request_get_status (MPI_Request request, int* flag, MPI_Status* status);
int PMPI_Status_c2f (const(MPI_Status)* c_status, MPI_Fint* f_status);
int PMPI_Status_f2c (const(MPI_Fint)* f_status, MPI_Status* c_status);
int PMPI_Type_create_darray (
    int size,
    int rank,
    int ndims,
    const(int)* array_of_gsizes,
    const(int)* array_of_distribs,
    const(int)* array_of_dargs,
    const(int)* array_of_psizes,
    int order,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int PMPI_Type_create_hindexed (
    int count,
    const(int)* array_of_blocklengths,
    const(MPI_Aint)* array_of_displacements,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int PMPI_Type_create_hvector (
    int count,
    int blocklength,
    MPI_Aint stride,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int PMPI_Type_create_indexed_block (
    int count,
    int blocklength,
    const(int)* array_of_displacements,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int PMPI_Type_create_hindexed_block (
    int count,
    int blocklength,
    const(MPI_Aint)* array_of_displacements,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int PMPI_Type_create_resized (
    MPI_Datatype oldtype,
    MPI_Aint lb,
    MPI_Aint extent,
    MPI_Datatype* newtype);
int PMPI_Type_create_struct (
    int count,
    const(int)* array_of_blocklengths,
    const(MPI_Aint)* array_of_displacements,
    const(MPI_Datatype)* array_of_types,
    MPI_Datatype* newtype);
int PMPI_Type_create_subarray (
    int ndims,
    const(int)* array_of_sizes,
    const(int)* array_of_subsizes,
    const(int)* array_of_starts,
    int order,
    MPI_Datatype oldtype,
    MPI_Datatype* newtype);
int PMPI_Type_get_extent (MPI_Datatype datatype, MPI_Aint* lb, MPI_Aint* extent);
int PMPI_Type_get_true_extent (MPI_Datatype datatype, MPI_Aint* true_lb, MPI_Aint* true_extent);
int PMPI_Unpack_external (
    const(char)* datarep,
    const(void)* inbuf,
    MPI_Aint insize,
    MPI_Aint* position,
    void* outbuf,
    int outcount,
    MPI_Datatype datatype);

//int PMPI_Win_create_errhandler (
//    void function (...) win_errhandler_fn,
//    MPI_Errhandler* errhandler);
int PMPI_Win_get_errhandler (MPI_Win win, MPI_Errhandler* errhandler);
int PMPI_Win_set_errhandler (MPI_Win win, MPI_Errhandler errhandler);
int PMPI_Type_create_f90_integer (int r, MPI_Datatype* newtype);
int PMPI_Type_create_f90_real (int p, int r, MPI_Datatype* newtype);
int PMPI_Type_create_f90_complex (int p, int r, MPI_Datatype* newtype);
int PMPI_Reduce_local (
    const(void)* inbuf,
    void* inoutbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op);

int PMPI_Op_commutative (MPI_Op op, int* commute);
int PMPI_Reduce_scatter_block (
    const(void)* sendbuf,
    void* recvbuf,
    int recvcount,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm);

int PMPI_Dist_graph_create_adjacent (
    MPI_Comm comm_old,
    int indegree,
    const(int)* sources,
    const(int)* sourceweights,
    int outdegree,
    const(int)* destinations,
    const(int)* destweights,
    MPI_Info info,
    int reorder,
    MPI_Comm* comm_dist_graph);
int PMPI_Dist_graph_create (
    MPI_Comm comm_old,
    int n,
    const(int)* sources,
    const(int)* degrees,
    const(int)* destinations,
    const(int)* weights,
    MPI_Info info,
    int reorder,
    MPI_Comm* comm_dist_graph);
int PMPI_Dist_graph_neighbors_count (MPI_Comm comm, int* indegree, int* outdegree, int* weighted);
int PMPI_Dist_graph_neighbors (
    MPI_Comm comm,
    int maxindegree,
    int* sources,
    int* sourceweights,
    int maxoutdegree,
    int* destinations,
    int* destweights);
int PMPI_Improbe (
    int source,
    int tag,
    MPI_Comm comm,
    int* flag,
    MPI_Message* message,
    MPI_Status* status);
int PMPI_Imrecv (
    void* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Message* message,
    MPI_Request* request);
int PMPI_Mprobe (int source, int tag, MPI_Comm comm, MPI_Message* message, MPI_Status* status);
int PMPI_Mrecv (
    void* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Message* message,
    MPI_Status* status);
int PMPI_Comm_idup (MPI_Comm comm, MPI_Comm* newcomm, MPI_Request* request);
int PMPI_Ibarrier (MPI_Comm comm, MPI_Request* request);
int PMPI_Ibcast (
    void* buffer,
    int count,
    MPI_Datatype datatype,
    int root,
    MPI_Comm comm,
    MPI_Request* request);
int PMPI_Igather (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    int root,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Igatherv (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* displs,
    MPI_Datatype recvtype,
    int root,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Iscatter (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    int root,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Iscatterv (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(int)* displs,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    int root,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Iallgather (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Iallgatherv (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* displs,
    MPI_Datatype recvtype,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Ialltoall (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Ialltoallv (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(int)* sdispls,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* rdispls,
    MPI_Datatype recvtype,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Ialltoallw (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(int)* sdispls,
    const(MPI_Datatype)* sendtypes,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* rdispls,
    const(MPI_Datatype)* recvtypes,
    MPI_Comm comm,
    MPI_Request* request);
int PMPI_Ireduce (
    const(void)* sendbuf,
    void* recvbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op,
    int root,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Iallreduce (
    const(void)* sendbuf,
    void* recvbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Ireduce_scatter (
    const(void)* sendbuf,
    void* recvbuf,
    const(int)* recvcounts,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Ireduce_scatter_block (
    const(void)* sendbuf,
    void* recvbuf,
    int recvcount,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Iscan (
    const(void)* sendbuf,
    void* recvbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Iexscan (
    const(void)* sendbuf,
    void* recvbuf,
    int count,
    MPI_Datatype datatype,
    MPI_Op op,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Ineighbor_allgather (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Ineighbor_allgatherv (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* displs,
    MPI_Datatype recvtype,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Ineighbor_alltoall (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Ineighbor_alltoallv (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(int)* sdispls,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* rdispls,
    MPI_Datatype recvtype,
    MPI_Comm comm,
    MPI_Request* request);

int PMPI_Ineighbor_alltoallw (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(MPI_Aint)* sdispls,
    const(MPI_Datatype)* sendtypes,
    void* recvbuf,
    const(int)* recvcounts,
    const(MPI_Aint)* rdispls,
    const(MPI_Datatype)* recvtypes,
    MPI_Comm comm,
    MPI_Request* request);
int PMPI_Neighbor_allgather (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    MPI_Comm comm);

int PMPI_Neighbor_allgatherv (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* displs,
    MPI_Datatype recvtype,
    MPI_Comm comm);

int PMPI_Neighbor_alltoall (
    const(void)* sendbuf,
    int sendcount,
    MPI_Datatype sendtype,
    void* recvbuf,
    int recvcount,
    MPI_Datatype recvtype,
    MPI_Comm comm);

int PMPI_Neighbor_alltoallv (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(int)* sdispls,
    MPI_Datatype sendtype,
    void* recvbuf,
    const(int)* recvcounts,
    const(int)* rdispls,
    MPI_Datatype recvtype,
    MPI_Comm comm);

int PMPI_Neighbor_alltoallw (
    const(void)* sendbuf,
    const(int)* sendcounts,
    const(MPI_Aint)* sdispls,
    const(MPI_Datatype)* sendtypes,
    void* recvbuf,
    const(int)* recvcounts,
    const(MPI_Aint)* rdispls,
    const(MPI_Datatype)* recvtypes,
    MPI_Comm comm);
int PMPI_Comm_split_type (MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm* newcomm);
int PMPI_Comm_create_group (MPI_Comm comm, MPI_Group group, int tag, MPI_Comm* newcomm);
int PMPI_Get_elements_x (const(MPI_Status)* status, MPI_Datatype datatype, MPI_Count* count);
int PMPI_Status_set_elements_x (MPI_Status* status, MPI_Datatype datatype, MPI_Count count);
int PMPI_Type_get_extent_x (MPI_Datatype datatype, MPI_Count* lb, MPI_Count* extent);
int PMPI_Type_get_true_extent_x (MPI_Datatype datatype, MPI_Count* lb, MPI_Count* extent);
int PMPI_Type_size_x (MPI_Datatype datatype, MPI_Count* size);
MPI_Aint PMPI_Aint_add (MPI_Aint base, MPI_Aint disp);
MPI_Aint PMPI_Aint_diff (MPI_Aint addr1, MPI_Aint addr2);
int PMPI_T_init_thread (int required, int* provided);
int PMPI_T_finalize ();
int PMPI_T_enum_get_info (MPI_T_enum enumtype, int* num, char* name, int* name_len);
int PMPI_T_enum_get_item (MPI_T_enum enumtype, int indx, int* value, char* name, int* name_len);
int PMPI_T_cvar_get_num (int* num_cvar);
int PMPI_T_cvar_get_info (
    int cvar_index,
    char* name,
    int* name_len,
    int* verbosity,
    MPI_Datatype* datatype,
    MPI_T_enum* enumtype,
    char* desc,
    int* desc_len,
    int* binding,
    int* scope_);
int PMPI_T_cvar_handle_alloc (
    int cvar_index,
    void* obj_handle,
    MPI_T_cvar_handle* handle,
    int* count);
int PMPI_T_cvar_handle_free (MPI_T_cvar_handle* handle);
int PMPI_T_cvar_read (MPI_T_cvar_handle handle, void* buf);
int PMPI_T_cvar_write (MPI_T_cvar_handle handle, const(void)* buf);
int PMPI_T_pvar_get_num (int* num_pvar);
int PMPI_T_pvar_get_info (
    int pvar_index,
    char* name,
    int* name_len,
    int* verbosity,
    int* var_class,
    MPI_Datatype* datatype,
    MPI_T_enum* enumtype,
    char* desc,
    int* desc_len,
    int* binding,
    int* readonly,
    int* continuous,
    int* atomic);
int PMPI_T_pvar_session_create (MPI_T_pvar_session* session);
int PMPI_T_pvar_session_free (MPI_T_pvar_session* session);
int PMPI_T_pvar_handle_alloc (
    MPI_T_pvar_session session,
    int pvar_index,
    void* obj_handle,
    MPI_T_pvar_handle* handle,
    int* count);
int PMPI_T_pvar_handle_free (MPI_T_pvar_session session, MPI_T_pvar_handle* handle);
int PMPI_T_pvar_start (MPI_T_pvar_session session, MPI_T_pvar_handle handle);
int PMPI_T_pvar_stop (MPI_T_pvar_session session, MPI_T_pvar_handle handle);
int PMPI_T_pvar_read (MPI_T_pvar_session session, MPI_T_pvar_handle handle, void* buf);
int PMPI_T_pvar_write (MPI_T_pvar_session session, MPI_T_pvar_handle handle, const(void)* buf);
int PMPI_T_pvar_reset (MPI_T_pvar_session session, MPI_T_pvar_handle handle);
int PMPI_T_pvar_readreset (MPI_T_pvar_session session, MPI_T_pvar_handle handle, void* buf);
int PMPI_T_category_get_num (int* num_cat);
int PMPI_T_category_get_info (
    int cat_index,
    char* name,
    int* name_len,
    char* desc,
    int* desc_len,
    int* num_cvars,
    int* num_pvars,
    int* num_categories);
int PMPI_T_category_get_cvars (int cat_index, int len, int* indices);
int PMPI_T_category_get_pvars (int cat_index, int len, int* indices);
int PMPI_T_category_get_categories (int cat_index, int len, int* indices);
int PMPI_T_category_changed (int* stamp);
int PMPI_T_cvar_get_index (const(char)* name, int* cvar_index);
int PMPI_T_pvar_get_index (const(char)* name, int var_class, int* pvar_index);
int PMPI_T_category_get_index (const(char)* name, int* cat_index);
int PMPIX_Comm_failure_ack (MPI_Comm comm);
int PMPIX_Comm_failure_get_acked (MPI_Comm comm, MPI_Group* failedgrp);
int PMPIX_Comm_revoke (MPI_Comm comm);
int PMPIX_Comm_shrink (MPI_Comm comm, MPI_Comm* newcomm);
int PMPIX_Comm_agree (MPI_Comm comm, int* flag);
int MPI_File_open (MPI_Comm comm, const(char)* filename, int amode, MPI_Info info, MPI_File* fh);
int MPI_File_close (MPI_File* fh);
int MPI_File_delete (const(char)* filename, MPI_Info info);
int MPI_File_set_size (MPI_File fh, MPI_Offset size);
int MPI_File_preallocate (MPI_File fh, MPI_Offset size);
int MPI_File_get_size (MPI_File fh, MPI_Offset* size);
int MPI_File_get_group (MPI_File fh, MPI_Group* group);
int MPI_File_get_amode (MPI_File fh, int* amode);
int MPI_File_set_info (MPI_File fh, MPI_Info info);
int MPI_File_get_info (MPI_File fh, MPI_Info* info_used);
int MPI_File_set_view (
    MPI_File fh,
    MPI_Offset disp,
    MPI_Datatype etype,
    MPI_Datatype filetype,
    const(char)* datarep,
    MPI_Info info);
int MPI_File_get_view (
    MPI_File fh,
    MPI_Offset* disp,
    MPI_Datatype* etype,
    MPI_Datatype* filetype,
    char* datarep);
int MPI_File_read_at (
    MPI_File fh,
    MPI_Offset offset,
    void* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Status* status);
int MPI_File_read_at_all (
    MPI_File fh,
    MPI_Offset offset,
    void* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Status* status);

int MPI_File_write_at (
    MPI_File fh,
    MPI_Offset offset,
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Status* status);

int MPI_File_write_at_all (
    MPI_File fh,
    MPI_Offset offset,
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Status* status);

int MPI_File_iread_at (
    MPI_File fh,
    MPI_Offset offset,
    void* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Request* request);
int MPI_File_iwrite_at (
    MPI_File fh,
    MPI_Offset offset,
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Request* request);

int MPI_File_read (MPI_File fh, void* buf, int count, MPI_Datatype datatype, MPI_Status* status);

int MPI_File_read_all (MPI_File fh, void* buf, int count, MPI_Datatype datatype, MPI_Status* status);

int MPI_File_write (
    MPI_File fh,
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Status* status);
int MPI_File_write_all (
    MPI_File fh,
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Status* status);
int MPI_File_iread (MPI_File fh, void* buf, int count, MPI_Datatype datatype, MPI_Request* request);

int MPI_File_iwrite (
    MPI_File fh,
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Request* request);
int MPI_File_seek (MPI_File fh, MPI_Offset offset, int whence);
int MPI_File_get_position (MPI_File fh, MPI_Offset* offset);
int MPI_File_get_byte_offset (MPI_File fh, MPI_Offset offset, MPI_Offset* disp);
int MPI_File_read_shared (
    MPI_File fh,
    void* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Status* status);
int MPI_File_write_shared (
    MPI_File fh,
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Status* status);
int MPI_File_iread_shared (
    MPI_File fh,
    void* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Request* request);
int MPI_File_iwrite_shared (
    MPI_File fh,
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Request* request);
int MPI_File_read_ordered (
    MPI_File fh,
    void* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Status* status);
int MPI_File_write_ordered (
    MPI_File fh,
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Status* status);
int MPI_File_seek_shared (MPI_File fh, MPI_Offset offset, int whence);
int MPI_File_get_position_shared (MPI_File fh, MPI_Offset* offset);
int MPI_File_read_at_all_begin (
    MPI_File fh,
    MPI_Offset offset,
    void* buf,
    int count,
    MPI_Datatype datatype);
int MPI_File_read_at_all_end (MPI_File fh, void* buf, MPI_Status* status);
int MPI_File_write_at_all_begin (
    MPI_File fh,
    MPI_Offset offset,
    const(void)* buf,
    int count,
    MPI_Datatype datatype);
int MPI_File_write_at_all_end (MPI_File fh, const(void)* buf, MPI_Status* status);
int MPI_File_read_all_begin (MPI_File fh, void* buf, int count, MPI_Datatype datatype);

int MPI_File_read_all_end (MPI_File fh, void* buf, MPI_Status* status);
int MPI_File_write_all_begin (MPI_File fh, const(void)* buf, int count, MPI_Datatype datatype);

int MPI_File_write_all_end (MPI_File fh, const(void)* buf, MPI_Status* status);
int MPI_File_read_ordered_begin (MPI_File fh, void* buf, int count, MPI_Datatype datatype);

int MPI_File_read_ordered_end (MPI_File fh, void* buf, MPI_Status* status);
int MPI_File_write_ordered_begin (MPI_File fh, const(void)* buf, int count, MPI_Datatype datatype);

int MPI_File_write_ordered_end (MPI_File fh, const(void)* buf, MPI_Status* status);
int MPI_File_get_type_extent (MPI_File fh, MPI_Datatype datatype, MPI_Aint* extent);
int MPI_Register_datarep (
    const(char)* datarep,
    int function () read_conversion_fn,
    int function () write_conversion_fn,
    int function () dtype_file_extent_fn,
    void* extra_state);
int MPI_File_set_atomicity (MPI_File fh, int flag);
int MPI_File_get_atomicity (MPI_File fh, int* flag);
int MPI_File_sync (MPI_File fh);
int MPI_File_iread_at_all (
    MPI_File fh,
    MPI_Offset offset,
    void* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Request* request);

int MPI_File_iwrite_at_all (
    MPI_File fh,
    MPI_Offset offset,
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Request* request);

int MPI_File_iread_all (
    MPI_File fh,
    void* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Request* request);

int MPI_File_iwrite_all (
    MPI_File fh,
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Request* request);

MPI_File MPI_File_f2c (MPI_Fint file);
MPI_Fint MPI_File_c2f (MPI_File file);
int PMPI_File_open (MPI_Comm, const(char)*, int, MPI_Info, MPI_File*);
int PMPI_File_close (MPI_File*);
int PMPI_File_delete (const(char)*, MPI_Info);
int PMPI_File_set_size (MPI_File, MPI_Offset);
int PMPI_File_preallocate (MPI_File, MPI_Offset);
int PMPI_File_get_size (MPI_File, MPI_Offset*);
int PMPI_File_get_group (MPI_File, MPI_Group*);
int PMPI_File_get_amode (MPI_File, int*);
int PMPI_File_set_info (MPI_File, MPI_Info);
int PMPI_File_get_info (MPI_File, MPI_Info*);
int PMPI_File_set_view (
    MPI_File,
    MPI_Offset,
    MPI_Datatype,
    MPI_Datatype,
    const(char)*,
    MPI_Info);
int PMPI_File_get_view (
    MPI_File,
    MPI_Offset*,
    MPI_Datatype*,
    MPI_Datatype*,
    char*);
int PMPI_File_read_at (
    MPI_File,
    MPI_Offset,
    void*,
    int,
    MPI_Datatype,
    MPI_Status*);

int PMPI_File_read_at_all (
    MPI_File,
    MPI_Offset,
    void*,
    int,
    MPI_Datatype,
    MPI_Status*);

int PMPI_File_write_at (
    MPI_File,
    MPI_Offset,
    const(void)*,
    int,
    MPI_Datatype,
    MPI_Status*);

int PMPI_File_write_at_all (
    MPI_File,
    MPI_Offset,
    const(void)*,
    int,
    MPI_Datatype,
    MPI_Status*);

int PMPI_File_iread_at (
    MPI_File,
    MPI_Offset,
    void*,
    int,
    MPI_Datatype,
    MPI_Request*);

int PMPI_File_iwrite_at (
    MPI_File,
    MPI_Offset,
    const(void)*,
    int,
    MPI_Datatype,
    MPI_Request*);

int PMPI_File_read (MPI_File, void*, int, MPI_Datatype, MPI_Status*);

int PMPI_File_read_all (MPI_File, void*, int, MPI_Datatype, MPI_Status*);

int PMPI_File_write (MPI_File, const(void)*, int, MPI_Datatype, MPI_Status*);

int PMPI_File_write_all (MPI_File, const(void)*, int, MPI_Datatype, MPI_Status*);

int PMPI_File_iread (MPI_File, void*, int, MPI_Datatype, MPI_Request*);

int PMPI_File_iwrite (MPI_File, const(void)*, int, MPI_Datatype, MPI_Request*);

int PMPI_File_seek (MPI_File, MPI_Offset, int);
int PMPI_File_get_position (MPI_File, MPI_Offset*);
int PMPI_File_get_byte_offset (MPI_File, MPI_Offset, MPI_Offset*);
int PMPI_File_read_shared (MPI_File, void*, int, MPI_Datatype, MPI_Status*);

int PMPI_File_write_shared (MPI_File, const(void)*, int, MPI_Datatype, MPI_Status*);

int PMPI_File_iread_shared (MPI_File, void*, int, MPI_Datatype, MPI_Request*);

int PMPI_File_iwrite_shared (
    MPI_File,
    const(void)*,
    int,
    MPI_Datatype,
    MPI_Request*);

int PMPI_File_read_ordered (MPI_File, void*, int, MPI_Datatype, MPI_Status*);

int PMPI_File_write_ordered (MPI_File, const(void)*, int, MPI_Datatype, MPI_Status*);

int PMPI_File_seek_shared (MPI_File, MPI_Offset, int);
int PMPI_File_get_position_shared (MPI_File, MPI_Offset*);
int PMPI_File_read_at_all_begin (
    MPI_File,
    MPI_Offset,
    void*,
    int,
    MPI_Datatype);

int PMPI_File_read_at_all_end (MPI_File, void*, MPI_Status*);
int PMPI_File_write_at_all_begin (
    MPI_File,
    MPI_Offset,
    const(void)*,
    int,
    MPI_Datatype);

int PMPI_File_write_at_all_end (MPI_File, const(void)*, MPI_Status*);
int PMPI_File_read_all_begin (MPI_File, void*, int, MPI_Datatype);

int PMPI_File_read_all_end (MPI_File, void*, MPI_Status*);
int PMPI_File_write_all_begin (MPI_File, const(void)*, int, MPI_Datatype);

int PMPI_File_write_all_end (MPI_File, const(void)*, MPI_Status*);
int PMPI_File_read_ordered_begin (MPI_File, void*, int, MPI_Datatype);

int PMPI_File_read_ordered_end (MPI_File, void*, MPI_Status*);
int PMPI_File_write_ordered_begin (MPI_File, const(void)*, int, MPI_Datatype);

int PMPI_File_write_ordered_end (MPI_File, const(void)*, MPI_Status*);
int PMPI_File_get_type_extent (MPI_File, MPI_Datatype, MPI_Aint*);
int PMPI_Register_datarep (
    const(char)*,
    int function (),
    int function (),
    int function (),
    void*);
int PMPI_File_set_atomicity (MPI_File, int);
int PMPI_File_get_atomicity (MPI_File, int*);
int PMPI_File_sync (MPI_File);
int PMPI_File_iread_at_all (
    MPI_File fh,
    MPI_Offset offset,
    void* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Request* request);

int PMPI_File_iwrite_at_all (
    MPI_File fh,
    MPI_Offset offset,
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Request* request);

int PMPI_File_iread_all (
    MPI_File fh,
    void* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Request* request);

int PMPI_File_iwrite_all (
    MPI_File fh,
    const(void)* buf,
    int count,
    MPI_Datatype datatype,
    MPI_Request* request);

MPI_File PMPI_File_f2c (MPI_Fint);
MPI_Fint PMPI_File_c2f (MPI_File);
alias MPIX_Grequest_class = int;
int MPIX_Grequest_class_create (
    int function () query_fn,
    int function () free_fn,
    int function () cancel_fn,
    int function () poll_fn,
    int function () wait_fn,
    MPIX_Grequest_class* greq_class);
int MPIX_Grequest_class_allocate (
    MPIX_Grequest_class greq_class,
    void* extra_state,
    MPI_Request* request);
int MPIX_Grequest_start (
    int function () query_fn,
    int function () free_fn,
    int function () cancel_fn,
    int function () poll_fn,
    int function () wait_fn,
    void* extra_state,
    MPI_Request* request);
int PMPIX_Grequest_class_create (
    int function () query_fn,
    int function () free_fn,
    int function () cancel_fn,
    int function () poll_fn,
    int function () wait_fn,
    MPIX_Grequest_class* greq_class);
int PMPIX_Grequest_class_allocate (
    MPIX_Grequest_class greq_class,
    void* extra_state,
    MPI_Request* request);
int PMPIX_Grequest_start (
    int function () query_fn,
    int function () free_fn,
    int function () cancel_fn,
    int function () poll_fn,
    int function () wait_fn,
    void* extra_state,
    MPI_Request* request);
